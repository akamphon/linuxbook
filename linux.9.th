\chapter{แนะนำโปรแกรมใช้งาน}
ปัจจุบันสภาพแวดล้อมเดสก์ท็อปเช่น GNOME, KDE พัฒนาไปอย่างรวดเร็ว, โปรแกรมต่างๆใช้งานง่ายขึ้น, มีอินเทอร์เฟสที่ทันสมัย. การใช้งานโปรแกรมบนลินุกซ์ไม่ได้จำกัดเฉพาะงานเดสก์ท็อป, โปรแกรมที่มีอินเฟสเป็นบรรทัดคำสั่งยังเป็นที่นิยมเพราะทำงานได้รวดเร็วและสามารถเขียนสคริปต์ให้ทำงานตามโดยที่ไม่ต้องโต้ตอบกับผู้ใช้ได้.  อย่างไรก็ตามโปรแกรมต่างสามารถใช้ร่วมกันได้เช่นในสภาพแวดล้อมเดสก์ท็อป GNOME สามารถใช้โปรแกรมของ KDE ได้หรือใช้โปรแกรมที่ไม่ได้ใช้ไลบรารี GTK+ ได้เช่นกัน. สิ่งที่สำคัญคือการรู้จักเลือกใช้โปรแกรมให้เหมาะสมกับงาน, สภาพแวดล้อม และตามความถนัดของผู้ใช้.

โปรแกรมหรือแอพพลิเคชันต่างๆที่ใช้ในลินุกซ์ส่วนใหญ่จะเป็นโปรแกรมซอฟต์แวร์เสรี. ตอนที่ติดตั้งลินุกซ์ดิสทริบิวชันผู้ใช้สามารถเลือกแอพพลิเคชันที่ใช้ติดตั้งในระบบหรือติดตั้งหลังติดตั้งตัวระบบปฏิบัติการ. วิธีการติดตั้งโปรแกรมจะอธิบายในบทที่เกี่ยวกับการดูแลระบบหน้า \pageref{sec:install}. ในบทนี้จะแนะนำโปรแกรมต่างๆตามประเภทการใช้งานเพื่อให้เห็นภาพพจน์และเป็นประโยชน์ในการใช้งานจริง. ในช่วงแรกเป็นเนื้อหาเกี่ยวกับบรรณาธิกรณ์ซึ่งจะอธิบายละเอียดกว่าโปรแกรมอื่นๆ. ส่วนแอพพลิเคชันแบบ GUI จะไม่เจาะลึกในรายละเอียดเนื่องจากผู้ใช้สามารถเรียนรู้จากการใช้แอพพลิเคชันเหล่านั้นด้วยตัวเองหรืออ่านจากหนังสือเล่มอื่นๆ.

\section{บรรณาธิกรณ์}
\emph{บรรณาธิกรณ์ (editor)}\gindex{บรรณาธิกรณ์}\gindex{editor} เป็นชื่อทั่วไปที่ใช้เรียกโปรแกรมสำหรับสร้างไฟล์หรือแก้ไข\mymemo{แก้ไข (edit) ในที่นี้หมายถึงการพิมพ์ข้อมูลเพิ่ม, ลบแก้ไขข้อมูล.}ข้อมูลที่มีอยู่. บรรณาธิกรณ์ต่างจากโปรแกรมเวิร์ดโปรเซสเซอร์เช่น OpenOffice ตรงที่บรรณาธิกรณ์เน้นการประมวลผลข้อมูลเท็กซ์เช่นแก้ไขข้อมูล, และไม่มีความสามารถในการจัดแต่งหน้าเอกสารสำหรับงานพิมพ์. ในระบบจำเป็นต้องมีบรรณาธิกรณ์เพื่อแก้ไขไฟล์ต่างๆ, ปรับแต่งระบบ. ผู้ใช้ทั่วไปโดยเฉพาะผู้ดูและระบบควรรู้จักวิธีใช้บรรณาธิกรณ์ที่ทำงานในเทอร์มินอลอย่างน้อยหนึ่งตัว.

บรรณาธิกรณ์ที่ใช้กันในปัจจุบันสามารถแบ่งออกเป็นสองกระแสตามความนิยมได้แก่ \cmd{vi} และ \cmd{emacs}. นอกจากนี้ยังมีบรรณาธิกรณ์อื่นๆเช่น \cmd{nano}, \cmd{gedit}, \cmd{kedit} ฯลฯ. \cmd{vi} และ \cmd{emacs} เป็นบรรณาธิกรณ์ที่ได้รับความนิยมสูงเพราะเป็นโปรแกรมที่มีมานานแล้ว, มีความสามารถต่างๆมากมาย, ใช้ได้กับงานทั่วไปจนถึงเป็นบรรณาธิกรณ์สำหรับเขียนโปรแกรมพัฒนาซอฟต์แวร์.

\subsection{\cmd{vi}(\cmd{m})}
บรรณาธิกรณ์ในยูนิกซ์ยุคแรกๆคือ \cmd{ed}\cindex{ed} เป็นบรรณาธิกรณ์ที่ประมวลผลข้อมูลเท็กซ์ในไฟล์บรรทัดต่อบรรทัด, ไม่สามารถแสดงข้อมูลต่อเนื่องเป็นหน้าบนเทอร์มินอล. โปรแกรม \cmd{ed} เป็นบรรณาธิกรณ์ที่ใช้ยากและในเวลาต่อมา George Coulouris\gindex{george coulouris@George Coulouris}\cite{em} สร้างบรรณาธิกรณ์ชื่อ \cmd{em} คล้ายกับ \cmd{ed} แต่ใช้งานง่ายขึ้น. ขณะที่ Bill Joy\gindex{bill joy@Bill Joy} พัฒนา BSD ได้พบกับ George Coulouris และได้เอาบรรณธิกรณ์ \cmd{em} เป็นต้นแบบในการสร้างบรรณาธิกรณ์ตัวใหม่ที่ดีกว่าได้แก่ \cmd{ex}\cindex{ex}. อย่างไรก็ตาม \cmd{ex} ก็ยังคงเป็นบรรณาธิกรณ์เชิงบรรทัด (line editor)\gindex{line editor} แบบเดิมจนกระทั่ง Bill Joy เขียนบรรณาธิกรณ์ใหม่สามารถแสดงผลเต็มหน้าจอได้ที่เรียกว่า \cmd{vi}\mymemo{\cmd{vi} อ่านออกเสียงว่า vee-eye}. \cmd{vi} รับแนวคิดของบรรณาธิกรณ์ก่อนหน้านั้นเช่น \cmd{ed} มาไม่น้อย. จะเห็นได้จากคำสั่งที่ใช้ใน \cmd{vi} เหมือนกับคำสั่งที่ใช้ใน \cmd{ed}.

ปัจจุบัน \cmd{vi} ที่ใช้กันในลินุกซ์ไม่ใช่โปรแกรม \cmd{vi} แบบดั้งเดิมแต่เป็นโปรแกรม \cmd{vi} โคลนคือเป็นบรรณาธิกรณ์ที่สร้างให้ทำงานเหมือนกับ \cmd{vi} และได้รับการปรับปรุงพัฒนาให้ดีขึ้นจนความสามารถบางอย่างแตกต่างจากของเดิมโดยสิ้นเชิง. โปรแกรม \cmd{vi} ในปัจจุบันคือ \cmd{vim}\cindex{vim} (Vi IMproved).\mymemo{โปรแกรม \cmd{vi} ที่ใช้ในหนังสือเล่มนี้จะหมายถึง \cmd{vim}.} ในดิสโทรทั่วไปจะสร้างซอฟต์ลิงก์ \cmd{vi} ชี้ไปที่ตัวโปรแกรม \cmd{vim}\cindex{vim}\cindex{vi}. โดvยปรกติ \cmd{vim} เป็นบรรณาธิกรณ์ที่ใช้อยู่ในเทอร์มินอลเช่นเดียวกับ \cmd{vi} แบบดั้งเดิม. แต่ตอนที่สร้าง \cmd{vim} จากรหัสต้นฉบับสามารถเลือกสร้าง \cmd{vim} ให้แสดงผลแบบ GUI ได้และจะมีโปรแกรมต่างหากเตรียมไว้ชื่อ \cmd{gvim}\cindex{gvim}. \cmd{gvim} จะมีหน้าต่างเป็นของตัวเองใช้ในระบบ X วินโดว์. อย่างไรก็ตามคนส่วนใหญ่ก็ยังนิยมให้ \cmd{vi} ซึ่งรันอยู่ในเทอร์มินอลตามปรกติ.

นอกจากนี้ยังมีโปรแกรมที่อยู่ในตระกูลเดียวกันได้แก่ \cmd{view}\cindex{view} คือ \cmd{vi} แบบพิเศษสำหรับเปิดอ่านไฟล์ได้อย่างเดียว, ไม่สามารถแก้ไขไฟล์. \cmd{ex}\cindex{ex} เป็นบรรณาธิกรณ์ประมวลผลข้อมูลบรรทัดต่อบรรทัดคล้าย \cmd{ed}. โปรแกรมเหล่านี้จริงๆแล้วก็คือ \cmd{vim}.

การใช้โปรแกรม \cmd{vim} มักจะสั่งคำสั่ง \cmd{vi} หรือ \cmd{vim} จากบรรทัดคำสั่ง.
\begin{MyVerbatim}
vi [\textit{options}] [\cmd{filename}]
\end{MyVerbatim}

\begin{table}[!h]
\begin{tabular}{lp{.75\textwidth}l}
%\caption{ตัวเลือกของโปรแกรม \cmd{vi}.}\label{tab:vioptions}\\
\toprule
\multicolumn{1}{c}{ตัวเลือก} & \multicolumn{1}{c}{คำอธิบาย}\\
\midrule
\cmd{-e} & รันโปรแกรมโดยให้ผลเหมือนกับ \cmd{ex}.\\
\cmd{-g} & รันโปรแกรมโดยใช้อินเทอร์เฟสแบบ GUI. ให้ผลเหมือนกับคำสั่ง \cmd{gvim}.\\
\cmd{-R} & ไฟล์ที่เปิดด้วย \cmd{vi} และตัวเลือกนี้จะเป็นไฟล์แบบอ่านได้อย่างเดียว, ไม่สามารถแก้ไขได้. ให้ผลเหมือนกับคำสั่ง \cmd{view}.\\
\cmd{-C} & ระบุให้ \cmd{vim} ทำงานเหมือนกับ \cmd{vi} แบบดั้งเดิมเท่าที่เป็นไปได้.\\
\bottomrule
\end{tabular}
\end{table}


ไฟล์ที่ระบุเป็นอาร์กิวเมนต์ของคำสั่งเป็นไฟล์ที่ต้องการแก้ไขหรือชื่อไฟล์ใหม่ที่ต้องการสร้าง. ถ้าไม่ระบุชื่อไฟล์และต้องการบันทึกสิ่งที่พิมพ์ต้องระบุชื่อไฟล์ภายหลัง.

%\begin{figure}[!htb]
%\plfiguretwo{.6}{vim.eps}{gvim.eps}{\cmd{vim} และ \cmd{gvim}.}{vim}
%\end{figure}


\subsubsection{โหมด}
ก่อนที่จะใช้ \cmd{vi} ต้องทำความรู้จักกับตัวโปรแกรมก่อนว่า \cmd{vi} มีแนวคิดเรื่องโหมด (mode). โหมดคือสภาพการทำงานแบ่งออกเป็น 2 แบบได้แก่
\begin{itemize}
\item โหมดคำสั่ง (command mode) --- หลังจากที่ \cmd{vi} เริ่มทำงานจะอยู่ในโหมดคำสั่ง. ขณะที่อยู่ในโหมดคำสั่ง, การกดปุ่มแป้นพิมพ์ถือเป็นการสั่งคำสั่งให้ \cmd{vi} กระทำการอะไรบางอย่าง. ปุ่มบางตัวกดแล้วจะมีการโต้ตอบทันทีเช่นการเลื่อนเคอร์เซอร์. คำสั่งบางอย่างต้องพิมพ์เครื่องหมาย \cmd{:} เป็นการเริ่มคำสั่งบอกโปรแกรมรับรู้ว่าคำสั่งนี้เป็นคำสั่งยาวและต้องกด \cmd{Enter} ตามจึงจะกระทำการ.
\item โหมดแก้ไข (edit mode) --- เวลาที่ต้องการพิมพ์ข้อความต้องเปลี่ยนโหมดให้อยู่ในโหมดแก้ไขก่อนจึงจะพิมพ์ข้อความได้. คำสั่ง (คีย์) ต่างๆที่แสดงในตารางที่ \ref{tab:vimode} เป็นวิธีการเปลี่ยนโหมดจากโหมดคำสั่งให้เป็นโหมดแก้ไข. ในทางกลับกันจะใช้การกดปุ่ม \cmd{Esc} เพื่อเปลี่ยนโหมดจากโหมดแก้ไขให้กลับเข้าสู่โหมดคำสั่ง.
\end{itemize}

\setlongtables
\begin{longtable}{lp{.75\textwidth}l}
\caption{คำสั่งสำหรับแก้ไขข้อความใน \cmd{vi}.}\label{tab:vimode}\\
\toprule
\multicolumn{1}{c}{คีย์คำสั่ง} & \multicolumn{1}{c}{คำอธิบาย}\\
\midrule
\cmd{a} & append --- เริ่มแก้ไขข้อมูลที่ตำแหน่งถัดจากเคอร์เซอร์.\\
\cmd{i}  & insert --- เริ่มแก้ไขข้อมูลที่ตำแหน่งเคอร์เซอร์ปัจจุบัน.\\
\cmd{o} & open line --- เปิดบรรทัดใหม่ถัดจากบรรทัดปัจจุบันเริ่มการแก้ไข.\\
\cmd{r} & replace character --- แก้ไขอักขระตำแหน่งเคอร์เซอร์ปัจจุบัน. หลังจากที่เปลี่ยนอักขระแล้วจะกลับเป็นโหมดคำสั่งทันที.\\
\cmd{R} & replace --- เริ่มการแก้ไขจากตำแหน่งเคอร์เซอร์ปัจจุบันและเขียนทับอักขระที่มีอยู่.\\
\bottomrule
\end{longtable}

\subsubsection{การเลื่อนเคอร์เซอร์}
การเลื่อนเคอร์เซอร์ใน \cmd{vi} ทำได้โดยการกดคีย์ลูกศรต่างๆขณะที่อยู่ในโหมดแก้ไขหรือโหมดคำสั่ง. ในโหมดคำสั่งสามารถใช้คีย์ \cmd{h} \cmd{j} \cmd{k} \cmd{l} แทนคีย์ลูกศรเลื่อนเคอร์เซอร์ไปทางซ้าย, บรรทัดถัดไป, บรรทัดก่อนหน้า และทางขวาได้ด้วย. ผู้ที่ใช้ \cmd{vi} คล่องแล้วจะถนัดใช้คีย์ \cmd{hjkl} มากกว่าคีย์ลูกศรเพราะโดยปรกติตำแหน่งของมือขวาที่วางบนแป้นพิมพ์จะตรงกับ \cmd{hjkl}.

\begin{figure}[!htb]
\plfigure{.6}{hjkl.eps}{ตำแหน่งของนิ้วเวลาใช้เลื่อนเคอร์เซอร์.}{hjkl}
\end{figure}

โปรแกรม \cmd{vi} มีคำสั่งสำหรับเลื่อนเคอร์ไปที่ต้นบรรทัดด้วยคีย์ \cmd{\^} และเลื่อนคำสั่งไปที่ท้ายบรรทัดด้วยคีย์ \cmd{\$}. อักขระที่ใช้เป็นคำสั่งนี้เหมือนกับอักขระที่ใช้ใน regular expression.

การเลื่อนเนื้อหาทั้งหน้าจอลงจะใช้คีย์ \cmd{Ctrl+f} (forward). ในทางกลับกันจะใช้คีย์ \cmd{Ctrl+b} (backward) เพื่อเลื่อนหน้าจอขึ้น. ในกรณีที่ต้องการตรวจสอบว่าตำแหน่งของเคอร์เซอร์อยู่ที่ส่วนไหนของไฟล์ให้กดคีย์ \cmd{Ctrl+g}. \cmd{vi} จะแสดงชื่อไฟล์, ข้อมูลของไฟล์ที่แก้ไขและตำแหน่งบรรทัดและคอลัมน์ของเคอร์เซอร์ที่บรรทัดสุดท้ายของเทอร์มินอล.

การย้ายเคอร์เซอร์ไปบรรทัดที่ต้องการให้กดเลขบรรทัดแล้วตามด้วย \cmd{G} (กด \cmd{Shift+g}) เช่นถ้าต้องการกระโดดไปบรรทัดที่สามให้กดคีย์ \cmd{3G}. ถ้ากด \cmd{G} โดยไม่มีตัวเลขนำหน้าจะเป็นการกระโดดไปที่บรรทัดสุดท้ายของไฟล์.

\begin{figure}[!htb]
\plfigure{.6}{vim-ctrlg.eps}{การแสดงตำแหน่งของเคอร์เซอร์ใน \cmd{vi}.}{vim-ctrlg}
\end{figure}


\subsubsection{ลบอักขระหรือข้อความ}
ขณะที่อยู่ในโหมดแก้ไขสามารถใช้คีย์ \cmd{Backspace} หรือ \cmd{Del} เพื่อลบอักขระที่ไม่ต้องการได้. \cmd{Backspace} จะลบอักขระที่อยู่ก่อนหน้าเคอร์เซอร์, \cmd{Del} จะลบอักขระที่อยู่ตรงตำแหน่งเคอร์เซอร์.

ถ้าอยู่ในโหมดคำสั่งสามารถใช้คำสั่งในตารางที่ \ref{tab:vimdelete}. ถ้าต้องการยกเลิกสิ่งที่กระทำไปให้ใช้กดคีย์ \cmd{u} (undo).

\begin{table}[!htb]
\caption{คำสั่งสำหรับลบอักขระใน \cmd{vi}.}\label{tab:vimdelete}
\medskip
\begin{tabular}{lp{.75\textwidth}l}
\toprule
\multicolumn{1}{c}{คีย์คำสั่ง} & \multicolumn{1}{c}{คำอธิบาย}\\
\midrule
\cmd{x} & ให้ผลเหมือนกับการกดคีย์ \cmd{Del} ในโหมดแก้ไข. ลบอักขระที่อยู่ในตำแหน่งเคอร์เซอร์.\\
\cmd{dd}  & ลบบรรทัดที่เคอร์เซอร์อยู่ทั้งบรรทัด.\\
\cmd{dw} & ลบคำ. คำในที่นี้หมายถึงคำภาษาอังกฤษ. เช่นถ้ามีสายอักขระ ``How are you?'' และเคอร์เซอร์อยู่ในตัวอักษร a, กด \cmd{dw} จะลบ are.\\
\cmd{D} & ลบอักขระตั้งแต่ตำแหน่งเคอร์เซอร์จนจบบรรทัด.\\
\bottomrule
\end{tabular}
\end{table}

อักขระที่ลบด้วยคำสั่งในตารางข้างบนจะถูกบันทึกไว้ในพื้นที่ชั่วคราว. หลังจากนั้นผู้ใช้สามารถเลื่อนเคอร์เซอร์ไปตำแหน่งที่ต้องการและเรียกอักขระที่อยู่ในพื้นที่ชั่วคราวกลับมาวางในตำแหน่งเคอร์เซอร์ได้ด้วยคีย์ \cmd{p}.

การลบอักขระเหล่าด้วยคำสั่งเหล่านี้สามารถระบุจำนวนที่ต้องการลบโดยพิมพ์จำนวนที่ต้องการลบแล้วตามด้วยคำสั่ง. การระบุจำนวนด้วยตัวเลขมีประโยชน์เมื่อต้องการลบข้อมูลในคราวเดียวเช่น \cmd{100dd} จะลบข้อมูล 100 บรรทัด, \cmd{4x} จะลบอักขระ 4 ตัวเป็นต้น. ในทำนองเดียวกันถ้าต้องการใช้เคอร์เซอร์เลือกช่วงที่ต้องการลบ, จะใช้ต้องเปลี่ยนเป็นโหมด VISUAL โดยกดคีย์ \cmd{v}. โปรแกรม \cmd{vi} จะไฮไลต์ส่วนที่เลือก, หลังจากนั้นผู้ใช้สามารถสั่งคำสั่งลบช่วงที่เลือกไว้ได้. ถ้าต้องการยกเลิกโหมด VISUAL ให้กดคีย์ \cmd{v} อีกครั้ง.


\begin{figure}[!htb]
\plfigure{.5}{vim-visual.eps}{โหมด VISUAL เลือกช่วงที่ต้องการกระทำการ.}{vim-visual}
\end{figure}


\subsubsection{เชื่อมต่อบรรทัด}
ในบางกรณีเรามีความจำเป็นต้องรวมบรรทัดสองบรรทัดเข้าเป็นบรรทัดเดียวกัน. ในโหมดคำสั่งสามารถใช้คีย์ \cmd{J} (join) รวมบรรทัดที่อยู่จากบรรทัดปัจจุบันต่อท้ายรวมกันเป็นบรรทัดเดียวได้. การใช้คำสั่งนี้จะเร็วกว่าการแก้ไขข้อมูลในโหมดแก้ไข.

ในทำนองเดียวกัน, ในกรณีที่ต้องการรวมข้อมูลจากไฟล์อื่นเข้ามาในไฟล์ที่แก้ไขอยู่ให้ใช้คำสั่ง \cmd{:r} (กด \cmd{:} แล้วกด \cmd{r}). ต่อจากนั้นให้พิมพ์ชื่อไฟล์ที่ต้องการดึงข้อมูลเข้ามาไว้ด้วยกัน. ในขณะที่พิมพ์ชื่อไฟล์สามารถใช้คีย์แท็บช่วยเติมเต็มชื่อไฟล์ได้ด้วย, เหมือนความสามารถของ bash เชลล์.


\begin{figure}[!htb]
\plfigure{.6}{vim-r.eps}{พรอมต์รอรับคำสั่งใน \cmd{vi}.}{vim-r}
\end{figure}

%คีย์ \cmd{:} เป็นคำสั่งพิเศษ, หลังจากที่กดคีย์นี้แล้ว \cmd{vi} จะรอรับคำสั่งต่อไปโดยแสดงพรอมต์ \cmd{:} บริเวณบรรทัดล่างสุดของหน้าจอมักเป็นคำสั่งที่เกี่ยวกับไฟล์และคำสั่งที่ต้องการข้อมูลเพิ่มเติมจากผู้ใช้.


\subsubsection{ค้นหาคำ}
การค้นข้อมูลในไฟล์เป็นงานที่เกิดขึ้นบ่อยครั้ง. ในโปรแกรม \cmd{vi} ผู้ใช้สามารถค้นหาคำด้วย regular expression โดยกดคีย์ \cmd{/} (search forward) ขณะที่อยู่ในโหมดคำสั่งและพิมพ์คำหรือ regular expression ที่ต้องการหาแล้วกด \cmd{Enter}. เคอร์เซอร์จะเลื่อนไปอยู่ตำแหน่งที่คำค้นหาเจอ. และจะไฮไลต์คำที่หาเจอด้วยถ้าปรับแต่ง \cmd{vi} ไว้. กด \cmd{n} (next match) เพื่อเลื่อนเคอร์เซอร์ไปตำแหน่งที่หาคำนั้นเจอต่อไปเรื่อยๆ. ในทางกลับกันคำสั่ง \cmd{?} ใช้หาคำที่อยู่ก่อนหน้าเคอร์เซอร์และกด \cmd{n} เพื่อดูคำที่หาเจอไปเรื่อยๆ.

\begin{figure}[!htb]
\plfigure{.6}{vim-search.eps}{การหาคำใน \cmd{vi}.}{vim-search}
\end{figure}

ข้อควรระวังในการหาคำคือการหาคำจะใช้ regular expression. ดังนั้นจะต้องเพิ่มเครื่องหมาย \cmd{\bs} หน้าอักขระที่มีความหมายพิเศษสำหรับ regular expression ทุกครั้ง.


\subsubsection{บันทึก, อ่านไฟล์, และจบการทำงาน}
คำสั่งของ \cmd{vi} ที่เกี่ยวข้องกับการบันทึกและจบการทำงานที่สำคัญๆสรุปไว้ในตารางที่ \ref{tab:vimend}.

\begin{longtable}{lp{.75\textwidth}l}
\caption{คำสั่งสำหรับจัดการไฟล์ใน \cmd{vi}.}\label{tab:vimend}\\
\toprule
\multicolumn{1}{c}{คีย์คำสั่ง} & \multicolumn{1}{c}{คำอธิบาย}\\
\midrule
\cmd{:w [\textit{filename}]} & บันทึกข้อมูลที่แก้ไขลงในไฟล์. ถ้าระบุชื่อไฟล์ด้วยจะเป็นการบันทึกข้อมูลลงในไฟล์ที่ระบุ.\\
\cmd{:q} & quit --- จบการทำงานโดยที่ไม่บันทึกสิ่งที่แก้ไข.\\
\cmd{:q!} & บังคับจบการทำงานโดยที่ไม่บันทึกสิ่งที่แก้ไข.\\
\cmd{ZQ} & ให้ผลเช่นเดียวกับ \cmd{:q!}.\\
\cmd{:wq}  & บันทึกข้อมูลที่แก้ไขลงในไฟล์แล้วจบการทำงาน.\\
\cmd{ZZ} & ให้ผลเหมือน \cmd{wq} แต่จะบันทึกข้อมูลเมื่อมีการเปลี่ยนแปลงเกิดขึ้น.\\
\cmd{:wq!}  & บังคับบันทึกข้อมูลที่แก้ไขลงในไฟล์แล้วจบการทำงาน.\\
\cmd{:e \textit{filename}} & เปิดแก้ไขไฟล์ที่ระบุ.\\
\bottomrule
\end{longtable}

\subsubsection{ขอความช่วยเหลือ}
ในโปรแกรม \cmd{vi} มีคำสั่งสำหรับแสดงเอกสารช่วยเหลือแนะนำการใช้คำสั่งเบื้องต้นได้แก่ \cmd{:help}. หรือระบุหัวข้อขอความช่วยเหลือ ``\cmd{:help [\textit{subject}]}''. \cmdit{subject} คือชื่อหัวข้อสำหรับการช่วยเหลือหรือคำสั่งที่ต้องการดูรายละเอียดการใช้งาน. ตัวอย่างคำสั่งเช่น ``\cmd{:help set}'' จะแสดงข้อมูลเกี่ยวกับการใช้คำสั่ง \cmd{set}.

นอกจากข้อมูลช่วยเหลือในตัวโปรแกรมยังมีโปรแกรม \cmd{vimtutor}\cindex{vimtutor} ช่วยสอนการใช้ \cmd{vi} เบื้องต้น.

\begin{figure}[!htb]
\plfigure{.6}{vimtutor.eps}{โปรแกรม \cmd{vitutor}.}{vimtutor}
\end{figure}

\subsubsection{ปรับแต่ง \cmd{vi}}
\cmd{vim} เป็นบรรณาธิกรณ์ที่สามารถปรับแต่งความสามารถต่างๆช่วยอำนวยความสะดวกของผู้ใช้. การปรับแต่งเบื้องต้นสามารถทำได้โดยการสั่งคำสั่ง \cmd{:set} และตามด้วยชื่อตัวเลือกต่างๆ. ชื่อตัวเลือกนี้อาจจะมีความหมายในตัวและไม่ต้องการอาร์กิวเมนต์เช่น ``\cmd{:set number}'' เป็นการสั้งให้ \cmd{vim} แสดงหมายเลขบรรทัดบริเวณซ้ายมือของหน้าจอ. ตัวเลือกบางตัวต้องการอาร์กิวเมนต์ได้แก่ค่าที่เป็นตัวเลขหรือสายอักขระเช่น ``\cmd{:set columns=80}'' เป็นการตั้งจำนวนคอลัมน์ที่แสดงผลในหน้าหนึ่งให้มีขนาด 80 ตัวอักษร. การใช้คำสั่ง \cmd{:set} มีรูปแบบต่างๆดังต่อไปนี้.
\begin{itemize}
\item \cmd{:set} --- แสดงชื่อและค่าตัวเลือกที่แตกต่างจากค่าโดยปริยาย.
\item \cmd{:set all} --- แสดงชื่อและค่าตัวเลือกทั้งหมด.
\item \cmd{:set \textit{option}?} --- ตรวจสอบค่าของตัวเลือกว่ามีค่าเป็นอะไรหรือมีการตั้งตัวเลือกที่ระบุหรือไม่.
\item \cmd{:set [no]\textit{option}} --- ใช้สำหรับระบุใช้ตัวเลือกที่ไม่ต้องการอาร์กิวเมนต์. ตัวเลือกพวกนี้สามารถพิมพ์คำว่า \cmd{no} นำหน้าเป็นการระบุยกเลิกตัวเลือกที่ตั้งไปแล้ว. ตัวอย่างเช่น ``\cmd{:set number}'', ``\cmd{:set nonumber}'' เป็นต้น.
\item \cmd{:set \textit{option}=\textit{value}} --- ตั้งค่าให้ตัวเลือกที่ต้องการอาร์กิวเมนต์เช่น ``\cmd{:set columns=80}''.
\end{itemize}

ตารางที่ \ref{tab:viset} แสดงชื่อตัวเลือกที่ใช้บ่อยและมีประโยชน์. บางกรณีชื่อตัวเลือกจะมีชื่อย่อและชื่อเต็ม.
\begin{longtable}{lp{.7\textwidth}l}
\caption{ตัวเลือกสำหรับการปรับแต่ง \cmd{vi}.}\label{tab:viset}\\
\toprule
\multicolumn{1}{c}{คำสั่ง} & \multicolumn{1}{c}{คำอธิบาย}\\
\midrule
\cmd{[no]autoindent} & ย่อหน้าบรรทัดใหม่ให้เหมาะสมโดยอัตโนมัติสำหรับการใช้ \cmd{vi} เขียนโปรแกรม. ตัวเลือกนี้มีชื่อย่อคือ \cmd{[no]ai}.\\
\cmd{[no]compatible} & ปรับแต่งให้ \cmd{vim} ทำงานเหมือน \cmd{vi} แบบดั้งเดิมเท่าที่เป็นไปได้. ถ้าต้องการใช้ \cmd{vim} เต็มความสามารถควรใช้ตัวเลือก ``\cmd{:set nocompatible}''. สิ่งที่แตกต่างระหว่าง \cmd{vi} และ \cmd{vim} ดูได้จากคำสั่ง ``\cmd{:help vi\_diff}''.\\
\cmd{[no]hlsearch} & ไฮไลต์คำที่หาเจอเมื่อสั่งคำสั่งค้นหา. ตัวเลือกนี้มีชื่อย่อคือ \cmd{[no]hls}.\\
\cmd{[no]incsearch} & ค้นหาคำทันทีขณะพิมพ์คำที่ต้องการค้นหา. ตัวเลือกนี้มีชื่อย่อคือ \cmd{[no]is}\\
\cmd{[no]ruler} & แสดงเลขบรรทัดและคอลัมน์ด้านล่างของหน้าจอ.\\
\cmd{[no]showmatch} & เลื่อนเคอร์เซอร์จับคู่วงเล็บแบบต่างๆเมื่อทำการปิดวงเล็บช่วยให้ผู้ใช้รับรู้ว่าบริเวณข้อมูลที่อยู่ในวงเล็บ. ตัวเลือกนี้มีชื่อย่อคือ \cmd{[no]sm}.\\
\cmd{[no]visualbell} & กระพริบหน้าจอแทนการใช้เสียงเมื่อเกิดข้อผิดพลาด. ตัวเลือกนี้มีชื่อย่อคือ \cmd{[no]vb}\\
\cmd{[no]wrap} & แสดงผลในบรรทัดถัดไปถ้าสิ่งที่พิมพ์ยาวเกินความกว้างที่ตั้งค่าไว้.\\
\cmd{mouse=a} & ระบุให้ใช้เมาส์ได้ในทุกโหมด. \cmd{vi} ที่รันอยู่ในเทอร์มินอลโดยปรกติจะไม่สามารถใช้เมาส์ได้.\\
%\cmd{sidescroll=\textit{number}} & \\
\bottomrule
\end{longtable}

ผู้ใช้ไม่จำเป็นต้องจำชื่อคำสั่งหรือตัวเลือกเหล่านี้ทั้งหมด. โปรแกรม \cmd{vi} จะเติมเต็มชื่อคำสั่งหรือตัวเลือกให้โดยอัตโนมัติถ้ากดคีย์ \cmd{Tab} ตามหลังเครื่องหมาย \cmd{:}. ผู้ใช้สามารถกดแท็บต่อกันหลายครั้งเพื่อเปลี่ยนชื่อคำสั่งที่ \cmd{vi} ช่วยเติมเต็มให้.

\cmd{vim} จะอ่านไฟล์ตั้งค่าเริ่มต้นจากไฟล์ \cmd{\~{}/.vimrc}\findex{.vimrc}. เนื้อหาของไฟล์คือคำสั่งที่ใช้ใน \cmd{vi} แต่ตัดเครื่องหมาย \cmd{:} ทิ้ง. ผู้ใช้สามารถสร้างไฟล์ \cmd{\~{}/.vimrc} หลังจากที่ปรับแต่งแล้วด้วยคำสั่ง ``\cmd{:mkvimrc \~{}/.vimrc}''. ในกรณีที่มีไฟล์ \cmd{\~{}/.vimrc} อยู่แล้วและต้องการเพิ่มเติมสิ่งที่ปรับแต่งใหม่ให้ใช้คำสั่ง ``\cmd{:mkvimrc! \~{}/.vimrc}'' แทน. บรรทัดที่เริ่มต้นด้วยเครื่องหมายคำพูด \cmd{"} จะเป็นคอมเมนต์.

\begin{shaded}
\begin{MyExample}[ไฟล์ \cmd{\~{}/.vimrc}.]
\begin{MyEx}
" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
set history=50          " keep 50 lines of command line history
set ruler               " show the cursor position all the time
set showcmd             " display incomplete commands
set incsearch           " do incremental searching
set mouse=a             " use mouse in terminal

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif
\end{MyEx}
\end{MyExample}
\end{shaded}

จากตัวอย่างไฟล์ \cmd{\~{}/.vimrc} ข้างบนมีคำสั่งที่ไม่ได้อธิบายในที่นี้เช่น \cmd{syntax}, \cmd{if} ฯลฯ. ผู้อ่านสามารถเปิดเอกสารขอความช่วยเหลือในโปรแกรม \cmd{vi} เช่น ``\cmd{:help syntax}'' เป็นต้น.

\medskip
สำหรับผู้ที่ไม่เคยใช้ \cmd{vi} มาก่อนอาจจะรู้สึกว่า \cmd{vi} เป็นบรรณาธิกรณ์ที่ใช้ยาก. แต่ถ้าเข้าใจหลักการการทำงานและลองใช้สักระยะจะคงจะเข้าใจได้ว่าทำไม \cmd{vi} จึงเป็นบรรณาธิกรณ์ยอดนิยม. วิธีใช้ \cmd{vi} ที่แนะนำไปนั้นเป็นการใช้เบื้องต้นเท่านั้น, ตัวโปรแกรมสามารถทำอะไรอีกมากมายและผู้ใช้สามารถปรับแต่งตัวการทำงานหรือการแสดงผลตามต้องการได้ด้วย.




\subsection{GNU Emacs}
ในราวปี ค.ศ.1976 ก่อนหน้าที่มีบรรณาธิกรณ์ Emacs มีบรรณาธิกรณ์ที่ชื่อว่า TECMAC และ TMACS สร้างโดย Guy Steele, Dave Moon, Richard Greenblatt, Charles Frankston และคณะ \cite{emacstimeline}. \emph{Emacs (Editor Macros)}\gindex{emacs@Emacs} เป็นบรรณาธิกรณ์ที่สร้างจาก TECMAC และ TMACS โดย Richard Stallman\gindex{richard stallman@Richard Stallman}, Guy Steele\gindex{guy steele@Guy Steele} และ Dave Moon\gindex{dave moon@Dave Moon} ในเวลาถัดมา. บรรณาธิกรณ์นี้ได้รับความนิยมเพราะสามารถแก้ไขข้อมูล, แสดงผลเป็นหน้าจอซึ่งแตกต่างจากบรรณาธิกรณ์เชิงบรรทัดที่มีใช้กันทั่วไปในขณะนั้น. Emacs กลายเป็นชื่อทั่วไปหมายถึงบรรณาธิกรณ์ที่ทำงานได้เหมือนกับ Emacs ที่สร้างในยุคแรกและต่อมามีคนหลายคนสร้างบรรณาธิกรณ์ในตระกูล Emacs เช่น Eine (Eien Is Not Emacs), Zmacs ฯลฯ. และบรรณาธิกรณ์ Emacs ที่มีชื่อเสียงได้แก่ \emph{Gosling Emacs}\gindex{emacs@Emacs!Gosling} ที่เขียนด้วยภาษา C เป็นครั้งแรกโดย James Gosling\gindex{james gosling@James Goslings}\mymemo{James Gosling ถือเป็นบิดาของภาษา Java.} ในปี ค.ศ.1981. ต่อมาในปี ค.ศ.1985, Richard Stallman ประกาศเผยแพร่ Emacs ที่เรียกว่า GNU Emacs\gindex{emacs@Emacs!GNU} สู่สาธารณะเป็นซอฟต์แวร์เสรีหลักของโครงการ GNU.

หลังจากที่มี GNU Emacs แล้วยังมีการแตกราก Emacs ต่อเช่น Lucid Emacs, Eposch, NEmacs, Mule ฯลฯ. Lucid Emacs เป็น Emacs ที่สนับสนุนการใช้งานกับระบบ X วินโดว์อย่างเต็มตัว, มีวิดเจ็ตเฉพาะของตัวเองเพิ่มความสามารถในการแสดงผลแบบ GUI. Lucid Emacs\gindex{emacs@Emacs!Lucid} พัฒนาโดย Jamie Zawinski\gindex{jamie zawinski@Jamie Zawinski} และทีมงานและหลังจากนั้นกลายเป็น XEmacs\gindex{xemacs@XEmacs}. NEmacs (Nihongo Emacs)\gindex{emacs@Emacs!Nihongo} เป็นบรรณาธิกรณ์ที่สร้างจาก GNU Emacs สนับสนุนการใช้ภาษาญี่ปุ่นในปี ค.ศ.1987. ต่อมาเปลี่ยนชื่อเป็น \emph{Mule (Multilingual Enhancement to GNU Emacs)}\gindex{mule@Mule} สนับสนุนภาษานานาชาติเช่น ภาษาจีน, เกาหลี ฯลฯ. Mule มีความสามารถสนับสนุนการใช้งานภาษาไทยด้วยซึ่งพัฒนาโดย Kenichi Handa\gindex{kenichi handa@Kenichi Handa}. ในปี ค.ศ.1997 ตอนที่ GNU Emacs รุ่นที่ 20 เผยแพร่สู่สาธารณะได้รวมความสามารถรองรับการใช้งานภาษานานาชาติของ Mule ไว้ด้วย.

\begin{figure}[!htb]
\plfigure{.5}{emacs-nw.eps}{Emacs ที่ทำงานใน \cmd{xterm}.}{emacs-nw}
\end{figure}
\begin{figure}[!htb]
\plfigure{.34}{emacs-gui.eps}{ส่วนต่างๆของ Emacs.}{emacs-gui}
\end{figure}


Emacs เป็นบรรณาธิกรณ์ที่รันได้ทั้งในเทอร์มินอลและแสดงผลเป็นหน้าต่างเฉพาะในระบบ X วินโดว์. โดยปรกติจะนิยมใช้ Emacs แบบ GUI มีหน้าต่างเฉพาะสำหรับโปรแกรมในรูปที่ \ref{fig:emacs-gui}. Emacs เป็นโปรแกรมขนาดใหญ่เมื่อเทียบกับ Vi. บางครั้งผู้ใช้ทั่วไปมักจะหลีกเลี่ยงการใช้ Emacs เพราะใช้ทรัพยากรในการทำงานสูงและความสามารถบางอย่างเกินความจำเป็น. สิ่งที่แตกต่างจาก Vi อย่างชัดเจนคือ Emacs ไม่มีแนวคิดเรื่องโหมดคำสั่งและโหมดแก้ไขเหมือน Vi. หลังจากที่ Emacs เริ่มทำงานแล้วผู้ใช้สามารถป้อนข้อมูลด้วยแป้นพิมพ์ได้ทันที.

Emacs เป็นโปรแกรมที่เขียนด้วยภาษา C และมีตัวแปลภาษา Lisp ที่เรียกว่า \emph{Emacs Lisp}\gindex{emacs@Emacs!Lisp}\mymemo{ต่อไปนี้จะเรียก Emacs Lisp ย่อๆเป็น Lisp.} ฝังอยู่ในตัวบรรณาธิกรณ์. การทำงานต่างๆใน Emacs จะดำเนินการโดยฟังก์ชันภาษา Lisp. ผู้ใช้สามารถนิยามฟังก์ชันใหม่ด้วยภาษา Lisp และรวบรวมเก็บในไฟล์ใช้เป็นไลบรารีเพื่อเพิ่มความสามารถให้กับ Emacs. ด้วยเหตุนี้เองทำให้ Emacs เป็นบรรณาธิกรณ์ที่ไม่ธรรมดา, สามารถทำอะไรได้หลายอย่างตั้งแต่แก้ไขข้อมูลในไฟล์เหมือนบรรณาธิกรณ์ทั่วไป, ใช้อ่านเมล, ส่งรับข้อมูลผ่าน ftp, อ่านนิวส์กรุป, ส่งข้อความ ICQ, อ่านเว็บ ฯลฯ.

\subsubsection{ส่วนประกอบใน Emacs}
ส่วนต่างๆของ Emacs อาจแบ่งได้เป็น 3 ส่วนได้แก่.
\begin{itemize}
\item \emph{บัฟเฟอร์ (buffer)}\gindex{buffer}\gindex{บัฟเฟอร์} --- เป็นพื้นที่แสดงข้อมูลและใช้แก้ข้อมูล. บัฟเฟอร์มีชื่อเฉพาะตัวซึ่งโดยปรกติจะเป็นชื่อไฟล์ที่ทำการแก้ไขอยู่. บัฟเฟอร์เป็นพื้นที่ในหน่วยความจำ, ถ้ามีการแก้ไขข้อมูลในบัฟเฟอร์, ข้อมูลในไฟล์ที่สัมพันธ์กับบัฟเฟอร์นั้นจะไม่เปลี่ยนแปลงทันที. ถ้าต้องการบันทึกสิ่งที่เปลี่ยนแปลงลงในไฟล์ต้องสั่งคำสั่งบันทึกข้อมูลในบัฟเฟอร์ลงในไฟล์.

โดยปรกติ Emacs จะมีบัฟเฟอร์อย่างน้อยหนึ่งตัวได้แก่บัฟเฟอร์ชื่อ *scratch*. บัฟเฟอร์นี้เป็นบัฟเฟอร์ที่ Emacs แสดงถ้ารันโดยไม่มีอาร์กิวเมนต์. สิ่งที่แก้ไขในบัฟเฟอร์นี้จะไม่มีการเก็บบันทึกถ้าไม่ระบุชื่อไฟล์ด้วยตัวเอง. ผู้ใช้สามารถเปิดบัฟเฟอร์ได้หลายตัวในหนึ่งหน้าต่าง. แต่ Emacs จะแสดงบัฟเฟอร์ที่เปิดตัวล่าสุดเท่านั้น. ผู้ใช้สามารถใช้คำสั่งเลือกบัฟเฟอร์ที่ต้องการมาแสดงผลและแก้ไขเมื่อต้องการ.
\item \emph{โหมดไลน์ (mode line)}\gindex{โหมดไลน์}\gindex{mode line} --- เป็นพื้นที่สำหรับแสดงสถานะต่างๆของ Emacs เช่นชื่อบัฟเฟอร์, สถานะของบัฟเฟอร์และข้อมูลที่เกี่ยวข้องกับโหมดที่ใช้อยู่. โหมด (mode)\gindex{mode}\gindex{โหมด} คือสภาพแวดล้อมของบัฟเฟอร์และกำหนดพฤติกรรมต่างๆของบัฟเฟอร์ที่ทำงานอยู่. โหมดยังแบ่งออกได้เป็น\emph{โหมดหลัก (major mode)}\gindex{โหมดหลัก}\gindex{major mode} และ \emph{โหมดรอง (minor mode)}\gindex{minor mode}\gindex{โหมดรอง}. บัฟเฟอร์หนึ่งตัวจะมีโหมดหลักได้หนึ่งชนิดแต่มีโหมดรองได้หลายชนิด. เช่นเวลาเขียนรหัสต้นฉบับภาษา C ด้วย Emacs และแสดงสีแยกแยะคีย์เวิร์ดจะมีโหมดหลักเป็น c-mode และมีโหมดรองเป็น font-lock-mode เป็นต้น. ถ้าโหมดที่ใช้ต่างกัน, คีย์คำสั่งที่ใช้ได้จะแตกต่างกันด้วย.

\begin{figure}[!hbt]
\plfigure{.6}{modeline.eps}{โหมดไลน์ (mode line).}{modeline}
\end{figure}

ข้อมูลที่แสดงในโหมดไลน์สำคัญๆได้แก่.
\begin{itemize}
\item สภาพผังแป้นพิมพ์ --- Emacs ที่สนับสนุนภาษานานาชาติมีวิธีการป้อนข้อมูลของตัวเองไม่ขึ้นกับระบบ X วินโดว์และจะแสดงผังแป้นพิมพ์ที่ใช้อยู่ในโหมดไลน์. ผังแป้นพิมพ์ภาษาไทยจะแสดงเป็น ``กก>'' บอกให้รู้ว่าสามารถพิมพ์ภาษาไทยได้. ส่วนผังแป้นพิมพ์ภาษาอังกฤษจะไม่มีการบอกสถานะ.
\item รหัสอักขระที่ใช้ในบัฟเฟอร์ --- Emacs สามารถระบุการเข้ารหัสอักขระของข้อมูลในบัฟเฟอร์ได้. การเข้ารหัสอักขระนี้จะพิจารณาตามโลแคลที่ใช้เช่นภาษาไทยแสดงตัวอักษร ``T:'' หมายถึงบัฟเฟอร์นั้นมีการเข้ารหัสอักขระเป็น TIS-620.
\item สภาพของบัฟเฟอร์ --- ในโหมดไลน์จะแสดงสภาพของบัฟเฟอร์ด้วยเครื่องหมายต่อไปนี้
\begin{itemize}
\item \cmd{--} --- บัฟเฟอร์ไม่มีการเปลี่ยนแปลงใดๆ.
\item \cmd{**} --- มีการเปลี่ยนแปลงเกิดขึ้นในบัฟเฟอร์.
\item \cmd{\%\%} --- บัฟเฟอร์นั้นเป็นบัฟเฟอร์ชนิดอ่านได้อย่างเดียว, ไม่สามารถแก้ไขได้.
\end{itemize}
\item ชื่อบัฟเฟอร์ --- ชื่อบัฟเฟอร์โดยปรกติจะเป็นชื่อไฟล์ที่เปิดแก้ไข.
\item ชื่อโหมด --- ชื่อโหมดจะเขียนอยู่ในวงเล็บ.
\item ข้อมูลอื่นๆ --- เช่นในรูปที่ \ref{fig:modeline} จะมีข้อมูลแสดงตำแหน่งของเคอร์เซอร์, เวลา ฯลฯ ในโหมดไลน์. ข้อมูลเหล่านี้เกิดจากการใช้โหมดรองเช่น column-number-mode, display-time-mode เป็นต้น.
\end{itemize}
\item \emph{มินิบัฟเฟอร์ (minibuffer)}\gindex{minibuffer}\gindex{มินิบัฟเฟอร์} --- เป็นพื้นที่สำหรับแสดงพรอมต์หรือคำถามต่างๆให้ผู้ใช้โต้ตอบป้อนข้อมูลด้วยแป้นพิมพ์. คำสั่งบางคำสั่งเช่นการเปิดอ่านไฟล์แก้ไขในบัฟเฟอร์จะถามชื่อไฟล์, ผู้ใช้ต้องพิมพ์ชื่อไฟล์ในมินิบัฟเฟอร์. ถ้าต้องการยกเลิกการป้อนข้อมูลให้ใช้คำสั่ง keyboard-quit โดยการกดคีย์ \cmd{\ovalbox{Ctrl}+\ovalbox{g}} แล้วเคอร์จะกลับไปสู่บัฟเฟอร์ที่ทำงานอยู่.
\end{itemize}

\subsubsection{การผูกเชื่อมคีย์}
เวลาผู้ใช้กดคีย์ต่างๆบนแป้นพิมพ์, Emacs จะรับรู้สิ่งที่กดและเรียกใช้ฟังก์ชันภาษา Lisp ที่ผูกเชื่อม (key binding)\gindex{key binding} กับคีย์นั้นๆ. ตัวอย่างเช่น คีย์ลูกศรขวาจะผูกติดกับฟังก์ชัน forward-char. เมื่อผู้ใช้กดคีย์ลูกศรขวา, โปรแกรมจะเรียกใช้ฟังก์ชัน forward-char เลื่อนเคอร์เซอร์ถัดไปหนึ่งตัวอักขระ. การกดคีย์ ``a'' ก็เช่นกันจะเป็นการเรียกใช้ฟังก์ชัน self-insert-command ใส่อักขระที่พิมพ์ตรงตำแหน่งเคอร์ปัจจุบัน. ชื่อฟังก์ชันเหล่านี้มักจะเป็นชื่อที่มีความหมายและคั่นด้วยเครื่องหมาย ``-''.

ฟังก์ชันพื้นฐานที่สำคัญๆจะมีคีย์ที่มอบหมายเตรียมไว้. ผู้ที่ใช้แป้นพิมพ์คล่องอาจจะไม่จำเป็นต้องแตะเมาส์เลยก็ได้. คีย์คำสั่งต่างๆที่ใช้ใน Emacs มักจะมีรูปแบบดังต่อไปนี้.


\begin{itemize}
\item \cmd{C-\textit{x}} --- หมายถึงการกดคีย์ \cmd{\ovalbox{Ctrl}} พร้อมกับคีย์ \cmdit{x}. ตัวอย่างเช่น ``\cmd{C-x C-c}'' หมายถึงให้กดคีย์ \cmd{\ovalbox{Ctrl}} ค้างไว้แล้วกด \cmd{\ovalbox{x}} ต่อด้วยการกดคีย์ \cmd{\ovalbox{Ctrl}} ค้างไว้แล้วกด \cmd{\ovalbox{c}}. คีย์คำสั่งนี้ผูกเชื่อมติดกับฟังก์ชัน save-buffer-kill-emacs บันทึกข้อมูลที่อยู่ในบัฟเฟอร์ลงไฟล์แล้วเลิกการทำงานของ Emacs.
\item \cmd{M-\textit{x}} --- หมายถึงการกดคีย์ \cmd{\ovalbox{Meta}} พร้อมกับคีย์ \cmdit{x}. แป้นพิมพ์ของคอมพิวเตอร์ส่วนบุคคลโดยทั่วไปจะไม่มีคีย์ \cmd{\ovalbox{Meta}}. ในกรณีนี้จะใช้คีย์ \cmd{\ovalbox{Esc}} หรือคีย์ \cmd{\ovalbox{Alt}} แทนแล้ว Emacs จะรับรู้การกดคีย์เหล่านี้เหมือนกับการกดคีย์ \cmd{\ovalbox{Meta}}.

ถ้าใช้คีย์ \cmd{\ovalbox{Esc}} ให้กดแล้วปล่อย, แล้วกดคีย์อื่นๆที่ระบุตาม. แต่ถ้าใช้คีย์ \cmd{\ovalbox{Alt}} ให้กดพร้อมกับคีย์ที่ต้องกดตามได้เลย. วิธีใช้คีย์ต่างกันเพราะ \cmd{\ovalbox{Esc}} ส่งสัญญาณรหัส ASCII Esc ในขณะที่คีย์ \cmd{\ovalbox{Alt}} ไม่ได้ส่งสัญญาณของรหัสใดๆแต่เป็นโมดิไฟเออร์คีย์จึงต้องกดค้างไว้. ตัวอย่างเช่น ``\cmd{M-v}'' หมายความว่าให้กดคีย์ \cmd{\ovalbox{Esc}} แล้วปล่อย, จากนั้นกดคีย์  \cmd{v} เป็นการเลื่อนหน้าจอขึ้นไปหนึ่งหน้า. ถ้าใช้คีย์ \cmd{\ovalbox{Alt}} ให้กดคีย์ \cmd{\ovalbox{Alt}} ค้างไว้แล้วตามด้วยการกดคีย์ \cmd{v}.
\item \cmd{C-M-\textit{x}} --- ใช้คีย์ \cmd{\ovalbox{Ctrl}} และ \cmd{\ovalbox{Meta}} ร่วมกัน. ถ้าใช้คีย์ \cmd{\ovalbox{Esc}} แทน \cmd{\ovalbox{Meta}} สามารถกดคีย์ \cmd{\ovalbox{Esc}} แล้วปล่อยตามด้วย \cmd{C-\textit{x}}. ถ้าใช้คีย์ \cmd{\ovalbox{Alt}}, \cmd{C-M-\textit{x}} หมายถึงการกดคีย์ \cmd{\ovalbox{Ctrl}} พร้อมกับ \cmd{\ovalbox{Alt}} ค้างไว้แล้วตามด้วย \cmdit{x}

\end{itemize}
คำสั่งหนึ่งสามารถผูกเชื่อมกับคีย์ได้มากกว่าหนึ่งตัวและคำสั่งที่ผูกเชื่อมกับคีย์สามารถเปลี่ยนไปตามโหมดที่ใช้.


\subsubsection{การเลื่อนเคอร์เซอร์}
การเลื่อนเคอร์เซอร์สามารถใช้คีย์ลูกศรเลื่อนเคอร์เซอร์ไปมา, หรือใช้คีย์คำสั่งต่อไปนี้.
\begin{itemize}
\item \cmd{C-f} -- forward-char --- เลื่อนเคอร์เซอร์ไปทางขวาหนึ่งอักขระ.
\item \cmd{C-b} -- backward-char --- เลื่อนเคอร์เซอร์ไปทางซ้ายหนึ่งอักขระ.
\item \cmd{C-n} -- next-line --- เลื่อนเคอร์เซอร์ไปขึ้นไปหนึ่งบรรทัด.
\item \cmd{C-p} -- previous-line --- เลื่อนเคอร์เซอร์ลงมาหนึ่งบรรทัด.
\item \cmd{C-v} -- scroll-up --- เลื่อนหน้าจอลงหนึ่งหน้า.
\item \cmd{M-v} -- scroll-down --- เลื่อนหน้าจอขึ้นหนึ่งหน้า.
\item \cmd{C-a} -- move-beginning-of-line --- เลื่อนเคอร์เซอร์ไปที่ต้นบรรทัด.
\item \cmd{C-e} -- move-end-of-line --- เลื่อนเคอร์เซอร์ไปที่ท้ายบรรทัด.
\item \cmd{M-<} -- beginning-of-buffer --- เลื่อนเคอร์เซอร์ไปที่ต้นบัฟเฟอร์.
\item \cmd{M->} -- end-of-buffer --- เลื่อนเคอร์เซอร์ไปที่ท้ายบัฟเฟอร์.
\item \cmd{C-M-a} -- beginning-of-defun --- เลื่อนเคอร์เซอร์ไปที่จุดเริ่มต้นของฟังก์ชัน. คำสั่งนี้มีประโยชน์เวลาใช้เขียนโปรแกรม.
\item \cmd{C-M-e} -- end-of-defun --- เลื่อนเคอร์เซอร์ไปที่ท้ายของฟังก์ชัน.
\item \cmd{C-M-f} -- forward-sexp --- เลื่อนเคอร์เซอร์ไปตำแหน่งถัดไปของวงเล็บหรือเครื่องหมายคำพูดที่เข้าคู่กัน. เช่นถ้ามีข้อมูล (abc) อยู่ในบัฟเฟอร์และเคอร์อยู่ที่ตำแหน่งอักษร a แล้วสั่งคำสั่ง forwawrd-sexp. เคอร์เซอร์จะเลื่อนไปอยู่ตำแหน่งของวงเล็บปิด.
\item \cmd{C-M-b} -- backward-sexp --- เลื่อนเคอร์เซอร์กลับไปตำแหน่งไปของวงเล็บหรือเครื่องหมายคำพูดที่เข้าคู่กัน.
\end{itemize}

\subsubsection{ลบอักขระหรือข้อความ}
การลบอักขระสามารถใช้คีย์ \cmd{\ovalbox{Backspace}} หรือ \cmd{\ovalbox{Del}} ได้เหมือนกับบรรณาธิกรณ์ปรกติ. นอกจากนี้แล้วจะมีคำสั่งต่างๆลบอักขระแบบอื่นๆเตรียมไว้ด้วยได้แก่.
\begin{itemize}
\item \cmd{C-d} -- delete-char --- ให้ผลเหมือนกันกดคีย์ \cmd{\ovalbox{Del}} คือลบอักขระหนึ่งตัวที่อยู่ตรงตำแหน่งเคอร์เซอร์.
\item \cmd{M-d} -- kill-word --- ลบคำหนึ่งคำจากตำแหน่งเคอร์เซอร์ปัจจุบัน.
\item \cmd{C-k} -- kill-line --- ลบอักขระตั้งแต่ตำแหน่งเคอร์เซอร์ปัจจุบันจนถึงสุดบรรทัด.
\item \cmd{C-w} -- kill-region --- ลบข้อมูลที่อยู่ในรีเจียนที่กำหนดไว้.
\end{itemize}


\subsubsection{มาร์กและรีเจียน}
\emph{มาร์ก (mark)}\gindex{มาร์ก}\gindex{mark} ใน Emacs หมายถึงการบันทึกตำแหน่งของเคอร์เซอร์เพื่อใช้กำหนด\emph{รีเจียน (region)}\gindex{region} สำหรับการประมวณผลข้อมูล. รีเจียนคือช่วงพื้นที่ระหว่างตำแหน่งที่มาร์กไว้และตำแหน่งเคอร์เซอร์ปัจจุบัน. การบันทึกตำแหน่งมาร์กให้ Emacs รับรู้จะใช้คำสั่ง set-mark-command ซึ่งโดยปรกติจะผูกเชื่อมต่อคำสั่งนี้ไว้กับคีย์ \cmd{C-@} และ \cmd{C-Space}. เนื่องจากการกดคีย์ \cmd{@} ต้องกด \cmd{Shift} ค้างไว้ด้วย, ดังนั้นการบันทึกตำแหน่งมาร์กมักจะใช้ \cmd{C-Space} ซึ่งทำได้ง่ายกว่าการกด \cmd{C-@}.

\begin{figure}[!hbt]
\plfigure{.6}{emacs-mark.eps}{การเซ็ตมาร์ก.}{emacs-mark}
\end{figure}

ในรูปที่ \ref{fig:emacs-mark} เป็นตัวอย่างการเซ็ตมาร์กเริ่มที่ตำแหน่ง ``so these ...'' โดยการกดคีย์ \cmd{C-Space}. ตรงมินิบัฟเฟอร์จะมีข้อความ ``Mark set'' บอกให้ผู้ใช้รู้ว่าได้เซ็ตมาร์กแล้ว. หลังจากนั้นให้เลื่อนเคอร์เซอร์ไปตำแหน่งที่ต้องเพื่อกำหนดรีเจียนที่ต้องการ. ในตัวอย่างเคอร์เซอร์อยู่ที่ ``... avoid error.'' ดังนั้นรีเจียนจะเป็นช่วงข้อความ ``so these ...'' จนถึง ``avoid error.''. Emacs ในรูปจะแสดงสีพื้นตัวอักษรของรีเจียนให้แตกต่างจากช่วงอื่น, แต่โดยปรกติจะไม่แสดงสีพื้นอักษรให้ถ้าไม่อยู่ในโหมด transient-mark-mode. หรือเวลาเซ็ตมาร์ก, กดคีย \cmd{C-Space} สองครั้งก็จะใช้โหมด transient-mark-mode ชั่วคราวให้.

คำสั่ง Emacs บางตัวจะประมวลข้อมูลที่อยู่ในรีเจียนเช่น kill-region, copy-region-as-kill, indent-region เป็นต้น. ถ้ากำหนดรีเจียนแล้วกดคีย์ \cmd{C-w} ซึ่งผูกเชื่อมไว้กับคำสั่ง kill-region, โปรแกรม Emacs จะลบข้อมูลที่เลือกไว้ในรีเจียน.

\subsubsection{อาร์กิวเมนต์}
คำสั่งใน Emacs สามารถระบุอาร์กิวเมนต์ได้เช่นในกรณีที่ต้องการลบบรรทัดที่อยู่ในบัฟเฟอร์ 10 บรรทัด, แทนที่จะกดคีย์ \cmd{C-k} สิบครั้ง, สามารถระบุจำนวนครั้งด้วยการกดคีย์ \cmd{C-u} (universal-argument) แล้วพิมพ์จำนวนบรรทัดที่ต้องการลบ.

คำสั่ง universal-argument เป็นวิธีการรับอาร์กิวเมนต์. เช่นคำสั่ง kill-line จะรับอาร์กิวเมนต์เป็นจำนวนบรรทัด. ถ้าไม่มีจำนวนบรรทัดให้เป็นอาร์กิวเมนต์ก็จะลบหนึ่งบรรทัด. ในทำนองเดียวกัน, คำสั่ง delete-char, delete-word สามารถรับอาร์กิวเมนต์ได้ด้วยเช่นกัน.

\subsubsection{ค้นข้อมูล, เปลี่ยนสายอักขระ}
การค้นข้อมูลใน Emacs จะกดคีย์ \cmd{C-s} ซึ่งผูกเชื่อมไว้กับคำสั่ง isearch-forward เป็นการหาสายอักขระขณะที่พิมพ์ไปเรื่อยๆ. การหาข้อมูลนี้จะหาข้อมูลที่อยู่ถัดจากตำแหน่งเคอร์เซอร์ปัจจุบัน. เมื่อกดคีย์ \cmd{C-s} แล้วจะรอรับคำที่ต้องการหาโดยแสดงพรอมต์ ``I-search:'' ที่มินิบัฟเฟอร์. ขณะที่ผู้ใช้ป้อนข้อมูลก็จะเลื่อนเคอร์เซอร์ในบัฟเฟอร์ไปที่ตำแหน่งข้อมูลที่หาเจอทันที. ถ้าป้อนข้อมูลด้วยอักษรภาษาอังกฤษตัวเล็กทั้งหมดจะเป็นการหาโดยไม่แยกแยะอักษรตัวใหญ่ตัวเล็ก, แต่ถ้าในสายอักขระมีอักษรตัวใหญ่ปรากฏอยู่ด้วยจะแยกแยะการหาสายอักขระระหว่างอักษรตัวใหญ่กับตัวเล็ก. การเลื่อนตำแหน่งที่ต้องการหาในบัฟเฟอร์ถัดไปให้กดคีย์ \cmd{C-s} ไปเรื่อยๆ.

การหยุดคำสั่งการหาข้อมูลมีอยู่ประเภทของกดคีย์ \cmd{Enter} เพื่อจบการหาข้อมูล. ในกรณีนี้เคอร์เซอร์จะหยุดอยู่ตรงตำแหน่งที่หาข้อมูลเจอ. การหยุดการทำงานอีกวิธีหนึ่งคือกดคีย์ \cmd{C-g} ซึ่งผูกเชื่อมไว้กับคำสั่ง keyboard-quit. ในขณะที่ Emacs กำลังหาข้อมูลที่ต้องการในบัฟเฟอร์, ตัวโปรแกรมจะรับข้อมูลที่ต้องการหาตลอดเวลาจนกว่าจะกดคีย์ \cmd{Enter} เพื่อจบการทำงานหรือกดคีย์ \cmd{C-s} เพื่อหาข้อมูลต่อไป. การกดคีย์ \cmd{C-g} จะเป็นการยกเลิกป้อนข้อมูลซึ่งหมายถึงเลิกหาข้อมูลไปในตัว.

ในทำนองเดียวกัน, การหาคำก่อนหน้าตำแหน่งเคอร์เซอร์จะใช้คีย์ \cmd{C-r} ซึ่งผูกเชื่อไว้กับคำสั่ง isearch-backward.

\subsubsection{การจัดการบัฟเฟอร์และไฟล์}
Emacs ที่รันอยู่ในระบบ X วินโดว์จะมีเมนูกระทำการเกี่ยวกับไฟล์เช่นอ่านไฟล์, บันทึกไฟล์ไว้ให้. การกระทำเหล่านี้เป็นคำสั่งซึ่งผูกเชื่อมกับคีย์ต่างๆและมักจะเริ่มต้นด้วยคีย์ \cmd{C-x}. คีย์บางตัวอาจจะเหมือนกับคีย์ลัดของแอพพลิเคชันในสภาพแวดล้อม GNOME เช่น \cmd{\ovalbox{Ctrl} + \ovalbox{s}} แต่มีความหมายแต่งกัน. ถ้าผู้ใช้คุ้นเคยกับคีย์คำสั่งต่างๆใน Emacs แล้ว, ก็จะไม่ต้องใช้เมาส์เลือกการกระทำต่างๆจากเมนูและใช้งานได้คล่องกว่า. นอกจากนั้นคีย์คำสั่งใน Emacs สามารถใช้ใน bash เชลล์ได้ด้วย.

การกระทำกับไฟล์หรือบัฟเฟอร์บางครั้ง Emacs ต้องการให้ผู้ใช้ป้อนข้อมูลเช่นชื่อบัฟเฟอร์หรือชื่อไฟล์ด้วยแป้นพิมพ์. Emacs จะแสดงพรอมต์หรือคำถามต่างๆที่มินิบัฟเฟอร์. ถ้าผู้ใช้ต้องการเลิกการป้อนข้อมูลในมินิบัฟเฟอร์ให้กดคีย์ \cmd{C-g} (keyboard-quit).

\begin{itemize}
\item \cmd{C-x C-f} -- find-file --- สำหรับเปิดอ่านไฟล์เข้าสู่บัฟเฟอร์เพื่อแก้ไขต่อไป. เมื่อสั่งคำสั่งนี้แล้ว Emacs จะแสดงพรอมต์ถามชื่อไฟล์ที่มินิบัฟเฟอร์. ผู้ใช้ต้องพิมพ์ชื่อไฟล์ที่ต้องการเปิดและการพิมพ์ชื่อไฟล์ Emacs จะชื่อเติมเต็มชื่อไฟล์ให้ด้วย. การเติมเต็มชื่อไฟล์ให้กดคีย์ \cmd{\ovalbox{Tab}} หรือกดคีย์ \cmd{\ovalbox{Tab} \ovalbox{Tab}} เพื่อแสดงรายการไฟล์หรือไดเรกทอรีในกรณีที่ไม่สามารถเติมเต็มชื่อไฟล์ให้ทันที.



คำสั่ง find-file ยังใช้สร้างไฟล์ใหม่ได้โดยการเขียนชื่อไฟล์ตอนที่ถาม.

\begin{figure}[!hbt]
\plfigure{.5}{find-file.eps}{เปิดไฟล์หรือสร้างไฟล์ใหม่.}{find-file}
\end{figure}

\begin{figure}[!hbt]
\plfigure{.5}{find-file-completion.eps}{เติมเต็มชื่อไฟล์หรือแสดงรายการไฟล์.}{find-file-completion}
\end{figure}

\item \cmd{C-x C-s} -- save-buffer --- หลังจากที่แก้ไขข้อมูลที่อยู่ในบัฟเฟอร์และต้องการบันทึกข้อมูลลงในไฟล์ให้กดคีย์ \cmd{C-x C-s}. Emacs จะแสดงข้อความบอกให้ผู้ใช้รู้ว่าได้บันทึกข้อมูลลงในไฟล์แล้วที่มินิบัฟเฟอร์.
\item \cmd{C-x C-w} -- write-file --- บันทึกข้อมูลที่อยู่ในบัฟเฟอร์ลงในไฟล์โดยจะถามชื่อไฟล์ให้ผู้ใช้ระบุในบริเวณมินิบัฟเฟอร์.
\item \cmd{C-x C-c} -- save-buffers-kill-emacs --- จบการทำงาน Emacs และถ้ามีบัฟเฟอร์ที่ยังไม่ได้บันทึกลงในไฟล์จะถามให้ผู้ย้ำให้ผู้ใช้บันทึกบัฟเฟอร์ก่อนจบการทำงาน.
\item \cmd{C-x i} -- insert-file --- คำสั่งนี้ใช้สำหรับแทรกข้อมูลจากไฟล์อื่นๆที่ระบุในตำแหน่งเคอร์เซอร์ปัจจุบัน.
\item \cmd{C-x b} -- switch-to-buffer --- บรรณาธิกรณ์ Emacs สามารถเปิดแก้ไขไฟล์ได้หลายบัฟเฟอร์พร้อมๆกัน. ถ้า Emacs ที่ใช้มีหน้าต่างเดียวและเปิดบัฟเฟอร์หลายตัว, จะแสดงบัฟเฟอร์ที่เปิดตัวล่าสุดเท่านั้น. บัฟเฟอร์ที่เปิดไว้ก่อนจะไม่หายไปไหนเพียงแต่จะไม่แสดงให้เห็นในหน้าต่าง. วิธีการสลับบัฟเฟอร์ไปมาให้กดคีย์ \cmd{C-x b} แล้วเขียนชื่อบัฟเฟอร์ที่ต้องการเปลี่ยนที่มินิบัฟเฟอร์. Emacs มีการช่วยเติมเต็มชื่อบัฟเฟอร์ให้ด้วยถ้ากด \cmd{\ovalbox{Tab}} หรือ \cmd{\ovalbox{Tab} \ovalbox{Tab}}.
\item \cmd{C-x C-b} -- list-buffers --- คำสั่งสำหรับแสดงชื่อบัฟเฟอร์ที่ Emacs รับรู้ทั้งหมด.
\item \cmd{C-x k} -- kill-buffer --- ทำลายบัฟเฟอร์ที่ใช้อยู่. Emacs จะถามย้ำถ้าบัฟเฟอร์ยังไม่ได้บันทึกลงไฟล์.
\end{itemize}

\subsubsection{หน้าต่าง}
หน้าต่างใน Emacs คือพื้นที่สำหรับแสดงเนื้อหาของบัฟเฟอร์และในที่นี้จะเรียกหน้าต่างโดยรวมที่แสดงในระบบ X วินโดว์ว่า\emph{เฟรม (frame)}. หน้าต่างหนึ่งสามารถแบ่งออกเป็นหน้าต่างย่อยๆได้ตามที่แสดงในรูปที่ \ref{fig:emacs-windows}. การแบ่งหน้าต่างย่อยนี้เหมาะสำหรับการแสดงบัฟเฟอร์หลายบัฟเฟอร์พร้อมๆกันแทนที่จะมีหน้าต่างเดียวและแสดงบัฟเฟอร์ได้ตัวเดียว.

\begin{figure}[!hbt]
\plfigure{.4}{emacs-windows.eps}{หน้าต่างย่อยแบบต่างๆใน Emacs.}{emacs-windows}
\end{figure}

คีย์คำสั่งที่ใช้ควบคุมหน้าต่างมีดังต่อไปนี้.
\begin{itemize}
\item \cmd{C-x 2} -- split-window-vertically --- แบ่งหน้าต่างที่ใช้อยู่ออกเป็นสองส่วนในแนวตั้ง.
\item \cmd{C-x 3} -- split-window-horizontally --- แบ่งหน้าต่างที่ใช้อยู่ออกเป็นสองส่วนในแนวนอน.
\item \cmd{C-x o} -- other-window --- เลื่อนเคอร์เซอร์ไปในแต่ละหน้าต่างย่อยที่มีอยู่ในเฟรม.
\item \cmd{C-x 0} -- delete -window --- ปิดหน้าต่างที่ใช้อยู่แต่ไม่ทำลายบัฟเฟอร์ที่หน้าต่างนั้นแสดงผล.\mymemo{ระวังสับสนระหว่างแนวคิดเรื่องหน้าต่างและบัฟเฟอร์.}
\item \cmd{C-x 1} -- delete-other-windows --- ปิดหน้าต่างอื่นๆที่ไม่ใช่หน้าต่างที่ใช้อยู่.
\item \cmd{C-x 5 2} -- make-frame-command --- สร้างเฟรมใหม่ต่างหาก.
\end{itemize}

\subsubsection{การใช้คำสั่งโดยตรง}
สำหรับผู้ที่เริ่มใช้ Emacs ควรจะจำคีย์คำสั่งสำคัญๆเช่นการเปิดอ่านไฟล์, บันทึกบัฟเฟอร์, เลิกการทำงาน เป็นต้น. คำสั่งใน Emacs มีมากมายและไม่มีทางที่จะจำได้หมดแต่ Emacs มีวิธีช่วยให้ผู้ใช้สั่งคำสั่งได้โดยตรงโดดยการการใช้คีย์คำสั่ง \cmd{M-x} (execute-extended-command) เป็นการใช้คำสั่งโดยตรงในกรณีที่คำสั่งนั้นไม่ได้ผูกเชื่อมกับคีย์ใดๆหรือต้องการสั่งคำสั่งเป็นชื่อคำสั่งแทนการกดคีย์คำสั่ง.

Emacs จะรอรับชื่อคำสั่งจากผู้ในบริเวณมินิบัฟเฟอร์หลังจากที่กดคีย์ \cmd{M-x}. ถ้าต้องการยกเลิกการสั่งคำสั่งให้กดคีย์ \cmd{C-g}. ถ้าผู้ใช้พอจะจำชื่อคำสั่งได้สามารถเขียนชื่อคำสั่ง (ชื่อฟังก์ชันใน Emacs Lisp) ทั้งหมดหรือบางส่วนและกด \cmd{\ovalbox{Tab}} ให้ Emacs ช่วยเติมเต็มชื่อคำสั่งให้. หรือถ้าต้องการดูชื่อคำสั่งที่เป็นไปได้ทั้งหมดก็ให้กด \cmd{\ovalbox{Tab}} \cmd{\ovalbox{Tab}}.

\begin{figure}[!hbt]
\plfigure{.5}{emacs-execute-command.eps}{การสั่งคำสั่งโดยตรงใน Emacs.}{emacs-execute-command}
\end{figure}

จากรูปที่ \ref{fig:emacs-execute-command} เป็นตัวอย่างการสั่งคำสั่ง goto-line โดยตรง. หลังจากที่กดคีย์ \cmd{M-x} แล้วพิมพ์คำว่า ``go'' แล้วกด \cmd{\ovalbox{Tab}} \cmd{\ovalbox{Tab}} ดูว่ามีคำสั่งอะไรที่ขึ้นต้นคำว่า ``go'' บ้าง. ในกรณีนี้เราต้องการสั่งคำสั่ง goto-line ก็พิมพ์ชื่อคำสั่งต่อ ``to-l'' แล้วกด \cmd{\ovalbox{Tab}} ให้ Emacs ช่วยเติมเต็มคำสั่งให้, ไม่ต้องเขียนคำสั่งทั้งหมดด้วยตัวเอง. เมื่อพิมพ์ชื่อคำสั่งเรียบร้อยแล้วกด \cmd{\ovalbox{Enter}} เพื่อสั่งงานต่อไป.

ถ้าคำสั่งนั้นมีการผูกเชื่อมไว้กับคีย์, Emacs จะแสดงข้อมูลเพิ่มเติมบอกไว้ว่ามีคีย์คำสั่งอะไรที่ใช้สั่งคำสั่งนั้น (รูปที่ \ref{fig:emacs-advice}).

\begin{figure}[!hbt]
\plfigure{.5}{emacs-advice.eps}{ข้อมูลเพิ่มเติมหลังจากสั่งคำสั่งโดยตรงใน Emacs.}{emacs-advice}
\end{figure}

ถ้าเรากดคีย์ \cmd{M-x} แล้วกด \cmd{\ovalbox{Tab}} \cmd{\ovalbox{Tab}} จะเห็นชื่อคำสั่งต่างๆที่สามารถใช้ได้. ในกรณีที่ต้องทำอะไรสักอย่างแต่ไม่รู้ชื่อคำสั่งอาจจะดูรายการคำสั่งที่แสดงไว้ทั้งหมด. แต่วิธีไม่ใช่วิธีที่เหมาะสมและ Emacs มีคำสั่ง apropos-command ซึ่งผูกเชื่อมไว้กับคีย์ \cmd{C-h a}. การหาชื่อคำสั่งจะใช้ regular expression หรือคำธรรมดาในการค้นหา.

\begin{figure}[!hbt]
\plfigure{.5}{emacs-apropos-results.eps}{คำสั่ง apropos และผลลัพธ์ใน Emacs.}{emacs-apropos-results}
\end{figure}

ผลลัพธ์ที่แสดงจะมีรายละเอียกคร่าวอธิบายการทำงานและคีย์คำสั่งที่ผูกเชื่อมไว้. จากรูป \ref{fig:emacs-apropos-results} เป็นตัวอย่างหาคำสั่งที่เกี่ยวกับการตรวจสะกดคำ. ถ้าต้องการตรวจการสะกดคำภาษาไทยอังกฤษสามารถใช้คำสั่ง ispell-word หรือคีย์คำสั่ง \cmd{M-\$}.


\subsubsection{ขอความช่วยเหลือ}
ใน Emacs จะมีคำสั่งช่วยเหลือต่างๆและจะมีคีย์คำสั่งขึ้นต้นด้วย \cmd{C-h}. คีย์คำสั่งที่เกี่ยวกับการช่วยเหลือต่างๆที่สำคัญๆได้แก่.
\begin{itemize}
\item \cmd{C-h a} -- command-apropos --- ใช้ค้นหาคำสั่งใช้งาน.
\item \cmd{C-h b} -- describe-bindings --- อธิบายคีย์คำสั่งในโหมดต่างๆที่ใช้อยู่ว่ามีคีย์คำสั่งอะไรบ้างและผูกเชื่อมไว้กับคำสั่งชื่ออะไร. ผู้ใช้สามารถสำรวจคีย์คำสั่งทั้งหมดที่ใช้ได้ด้วยคำสั่งนี้.
\item \cmd{C-h f} -- describe-function --- หลังจากที่ระบุชื่อฟังก์ชันจะอธิบายการทำงานอย่างคร่าวๆและคีย์คำสั่งที่ผูกเชื่อมไว้ (ถ้ามี).
\item \cmd{C-h i} -- info --- ดูคู่มือการใช้งานโปรแกรมต่างแบบ info ด้วย Emacs.
\item \cmd{C-h k} -- describe-key --- อธิบายคีย์คำสั่งที่กดว่าผูกเชื่อมอยู่กับคำสั่งอะไร.
\item \cmd{C-h m} -- describe-mode --- อธิบายโหมดที่บัฟเฟอร์ใช้อยู่.
\item \cmd{C-h p} -- finder-by-keyword --- หาชื่อแพกเกจเพิ่มเติมที่ใช้กับ Emacs.
\item \cmd{C-h t} -- help-with-tutorial --- แสดงติวทอเรียลการใช้การ Emacs ในภาษาท้องถิ่นเช่นภาษาไทยเป็นต้น (รูปที่ \ref{fig:emacs-gui}).
\end{itemize}


\subsubsection{ปรับแต่ง Emacs}
โปรแกรม Emacs มีไฟล์ตั้งค่าเริ่มต้นได้แก่ \cmd{\~{}/.emacs}\findex{.emacs} เป็นไฟล์เท็กซ์ที่เขียนด้วยภาษา Emacs Lisp. ในไฟล์นี้สามารถใช้ฟังก์ชันที่เตรียมไว้ปรับแต่งพฤติกรรมต่างๆของ Emacs เช่นโหมดที่ต้องการใช้, ผูกเชื่อมคีย์คำสั่งเป็นต้น. การเขียนไฟล์ตั้งค่าเริ่มต้นนี้ต้องมีความรู้เบื้องต้นเกี่ยวกับภาษา Emacs Lisp ซึ่งจะไม่อธิบายในหนังสือเล่มนี้แต่สามารถหาอ่านได้จากคู่มือ Emacs จากอินเทอร์เน็ตหรือในเมนูของ Emacs.

\begin{shaded}
\begin{MyExample}[ไฟล์ตั้งค่าเริ่มต้นของ Emacs]\label{ex:dotemacs}
\begin{MyEx}
;; \thtt{ตัวอย่างไฟล์ตั้งค่าเริ่มต้น} ~/.emacs
(set-language-environment 'thai) ;; \thtt{สภาพแวดล้อมภาษาไทย}
(global-font-lock-mode)          ;; ให้แสดงสีคีย์เวิร์ด
(transient-mark-mode t)          ;; แสดงรีเจียนให้เห็นชัด
;; \thtt{ตั้งค่าตัวแปล} user-mail-address
(setq user-mail-address "poonlap@linux.thai.net")
;; \thtt{ให้} text-mode \thtt{เป็นโหมดปริยายของบัฟเฟอร์ใหม่}
(setq default-major-mode 'text-mode)
\end{MyEx}
\end{MyExample}
\end{shaded}

\subsubsection{การใช้ภาษาไทยกับ Emacs}
Emacs ที่สามารถใช้ภาษาไทยจะต้องเป็นรุ่น 20 เป็นต้นไป, แสดงผลภาษาไทยและพิมพ์ภาษาไทยได้โดยมีผังแป้นพิมพ์ในตัวโปรแกรมไม่เกี่ยวข้องกับระบบ X วินโดว์. Emacs จะเลือกฟอนต์ภาษาไทยที่เหมาะสมในการแสดงผลซึ่งถ้าไม่ชอบฟอนต์ใช้สามารถระบุด้วยตัวเลือก \cmd{-fn \textit{fontname}} ตอนที่รันโปรแกรม Emacs. ตัวอย่างต่อไปนี้เป็นการรันโปรแกรมโดยใช้ฟอนต์ -nectec-emacs-bold-r-normal--18-180-72-72-c-90-tis620-0 ซึ่งเป็นฟอนต์ที่แก้ไขมาจากฟอนต์บิตแมปของเนคเทคใช้กับ Emacs ได้.
\begin{MyExample}[การระบุฟอนต์ที่ต้องการใช้กับ Emacs.]
\begin{MyEx}
$ \cin{emacs -fn -nectec-emacs-bold-r-normal--18-180-72-72-c-90-tis620-0}
 --- \thtt{หรือ} ---
$ \cin{emacs -fn themacs18}
\end{MyEx}
\end{MyExample}
ฟอนต์ภาษาไทยที่ใช้กับ Emacs ต้องเป็นฟอนต์ที่ขนาดของอักขระทุกตัวมี่ค่าคงที่รวมถึงสระและวรรณยุกต์ด้วย.

Emacs ที่ต้องการใช้ภาษาไทยต้องสั่งคำสั่ง set-language-environment ให้เป็นภาษาไทยด้วย. คำสั่งนี้จะเตรียมแป้นพิมพ์และสภาพแวดล้อมการทำงานภาษาไทยให้. ถ้าไม่สั่งคำสั่งนี้โดยตรงก็เขียนไว้ในไฟล์ตั้งค่าเริ่มต้นที่แสดงในตัวอย่างที่ \ref{ex:dotemacs}. เวลาพิมพ์ต้องการพิมพ์ภาษาไทยให้กดคีย์ \cmd{C-\bs} จะสลับเปลี่ยนผังแป้นพิมพ์ไปมาระหว่างภาษาอังกฤษและภาษาไทย.



\section{แอพพลิเคชันสำนักงาน}
ในปัจจุบันแอพพลิเคชันสำนักงานเช่นเตรียมเอกสาร, ตารางคำนวณ, นำเสนอผลงาน ฯลฯ มีความสำคัญสำหรับการใช้งานประเภทเดสก์ท็อป. โปรแกรมประเภทนี้เริ่มพัฒนาและใช้งานได้ดีหลังจากที่มีทูลคิตสมัยใหม่เช่น GTK+ และ Qt ออกมา.

ถ้าพูดถึงแอพพลิเคชันสำนักงานคงจะหนีไม่พ้นชุดแอพพลิเคชันสำนักงาน OpenOffice\gindex{openoffice@OpenOffice} ซึ่งเดิมที่เป็นชุดแอพพลิเคชันที่เรียกว่า ApplixWare สำหรับใช้ระบบปฏิบัติการยูนิกซ์. ต่อมาบริษัท Sun Microsystems ซื้อ ApplixWare และพัฒนาเพิ่มเติมให้เป็น StarOffice และท้ายสุดเปิดเผยรหัสต้นฉบับและมอบให้ชุมชนพัฒนาต่อในชื่อของ OpenOffice. ในประเทศไทยจะมีแอพพลิเคชันสำนักงานที่ใช้กับลินุกซ์ 2 ตัวที่ใช้กันอย่างกว้างขวางได้แก่ OfficePladao\gindex{officepladao@OfficePladao} และ OfficeTLE\gindex{officetle@OfficeTLE} ซึ่งเป็นชุดซอฟต์แวร์ที่พัฒนาต่อยอดมาจาก OpenOffice ให้สนับสนุนการใช้งานกับภาษาไทยได้อย่างดี. แต่ในปัจจุบันเริ่มมีการรวมความสามารถการประมวลผลภาษาไทยเหล่านั้นกลับเข้าสู่โครงการ OpenOffice เรื่อยๆและในอนาคตคาดว่าสามารถใช้ภาษาไทยได้กับ OpenOffice โดยไม่ต้องพึ่ง OfficePladao หรือ OfficeTLE.

นอกจากชุดแอพพลิเคชันสำนักงาน OpenOffice แล้วยังมีแอพพลิเคชันอื่นๆที่ใช้ทูลคิตสมัยใหม่เช่น GTK+ และ Qt เช่น

\begin{itemize}
\item Abiword --- โปรกแกรมเวิร์ดโปรเซส WYSIWYG (What you see is what you get) ที่ใช้ทูลคิต GTK+.
\item Gnumeric --- โปรแกรมตารางคำนวณสำหรับสภาพแวดล้อม GNOME.
\item Koffice --- ชุดแอพพลิเคชันสำนักงานในสภาพแวดล้อมเดสก์ท็อป KDE. ผู้ใช้สามารถเริ่มการทำงานด้วยคำสั่ง \cmd{koshell}\cindex{koshell} ซึ่งเป็นตัวโปรแกรมสำหรับเรียกใช้โปรแกรมส่วนประกอบอื่นๆอีกที. แอพพลิเคชันเหล่านี้ใช้ภาษาไทยได้ในระดับดี.
\begin{itemize}
\item \cmd{kaddressbook}\cindex{kaddressbook} --- โปรแกรมเก็บที่อยู่สำหรับติดต่อกับบุคคล. สามารถเก็บข้อมูลในระบบไฟล์, LDAP หรือ SQL เซิร์ฟเวอร์.
\item \cmd{karbon}\cindex{karbon} ---  โปรแกรมสำหรับวาดรูปแบบเวคเตอร์.
\item \cmd{kchart}\cindex{kchart} --- โปรแกรมสำหรับสร้างรูปชาร์ต, แผนภาพสถิติต่างๆ.
\item \cmd{kformula}\cindex{kformula} --- โปรแกรมสำหรับเขียนสูตรเลขใช้กับแอพพลิเคชันสำนักงานอื่นๆ.
\item \cmd{kivio}\cindex{kivio} --- โปรแกรมสำหรับเขียนแผนผังหรือโฟลชาร์ต.
\item \cmd{kpresenter}\cindex{kpresenter} --- โปรแกรมนำเสนอผลงาน.
\item \cmd{kspread}\cindex{kspread} --- โปรแกรมตารางคำนวณ.
\item \cmd{kugar}\cindex{kugar} --- โปรแกรมสำหรับสร้างรายงาน.
\item \cmd{kword}\cindex{kword} --- โปรแกรมเวิร์ดโปรเซสเซอร์.
\end{itemize}
\end{itemize}

\begin{figure}[!hbt]
\plfigure{.45}{koshell.eps}{ชุดแอพพลิเคชันสำนักงาน KOffice.}{koffice}
\end{figure}



\section{กราฟิก}
โปรแรกมที่เกี่ยวกับงานกราฟิกในลินุกซ์ก้าวหน้าไปมากเนื่องจากมีการพัฒนาทูลคิตและไลบรารีอำนวยความสะดวกมากมาย. ในช่วงนี้จะแนะนำโปรแกรมพอสังเขปเป็นแนวทางในการเลือกใช้แอพพลิเคชันให้เหมาะสมกับงาน.

\subsection{Gimp}
\begin{figure}[!hbt]
\plfigure{.4}{gimp.eps}{โปรแกรม Gimp.}{gimp}
\end{figure}

\emph{Gimp (GNU Image manipulation program)}\gindex{gimp@Gimp}\cindex{gimp} เป็นแอพพลิเคชันเดสก์ท็อปหลักสำหรับลินุกซ์ใช้ปรับแต่งภาพหรือสร้างภาพดิจิตอล. Gimp เป็นที่ยอมรับว่าเป็นโปรแกรมกราฟิกที่เยี่ยมยอดและเป็นตัวเลือกใช้แทนโปรแกรมในระบบปฏิบัติการวินโดวส์เช่น PhotoShop ได้ในเกือบทุกกรณี. Gimp มีการจัดการรูปด้วย\emph{เลเยอร์ (layer)}, รองรับไฟล์รูปภาพหลายฟอร์แมต, มี\emph{ปลั้กอิน (plugin)} ช่วยอำนวยความสะดวกในการสร้างเอฟเฟคต่างๆ. นอกจากนั้นมีภาษา scheme\gindex{scheme} ในตัวใช้เขียนสคริปต์เพื่อสร้างปลั้กอินหรือเขียนสคริปต์ประมวลรูปภาพโดยไม่ใช้ GUI ก็ได้.

\subsection{Inkscape}
\begin{figure}[!hbt]
\plfigure{.4}{inkscape.eps}{โปรแกรม Inkscape.}{inkscape}
\end{figure}


Inkscape\gindex{inkscape}\cindex{inkscape} เป็นโปรแกรมสำหรับวาดรูปแบบเวคเตอร์. ไฟล์ที่สร้างด้วย Inkscape เป็นฟอร์แมต SVG (Scalable Vector Graphic)\gindex{svg@SVG} ซึ่งเป็นไฟล์เท็กซ์บันทึกของในรูปของ XML.

ภาพที่สร้างด้วย Inkscape มีข้อดีที่เป็นเวคเตอร์สามารถย่อขยายได้โดยที่ภาพยังคงรายละเอียดเดิมไว้. นอกจากนั้นสามารถเอ็กซ์พอร์ตเป็นฟอร์แมตอื่นๆเช่น eps หรือ png ได้ด้วย. Inkscape รุ่นใหม่สามารถกับโปรแกรมเทรส (trace) รูปภาพเช่น \cmd{postrace}\cindex{potrace} ช่วยวาดรูปได้ง่ายขึ้นด้วย.

โปรแกรมประเภทเดียวกันกับ Inkscape เช่น \cmd{killustrator}, \cmd{karbon} ฯลฯ.

\subsection{Dia}
\begin{figure}[!hbt]
\plfigure{.4}{dia.eps}{โปรแกรม Dia.}{dia}
\end{figure}

Dia\gindex{dia@Dia}\cindex{dia} เป็นโปรแกรมสำหรับวาดแผนภาพประกอบเอกสาร. ตัวโปรแกรมมีประเภทของแผนภาพเตรียมไว้ให้เช่นในประเภท UML จะมีเครื่องหมายต่างๆที่เกี่ยวกับการเขียนแผนภาพ UML, ประเภทของ Circuit จะมีรูปตัวต้านทาน, ไดโอด ฯลฯเตรียมไว้ให้ใช้ เป็นต้น. โปรแกรม รุ่นใหม่ๆเช่น 0.94 สามารถเอ็กซ์พอร์ตรูปที่วาดเป็นฟอร์แมตเวคเตอร์อื่นๆได้เช่น eps และแสดงฟอนต์ภาษาไทยได้ด้วย.

โปรแกรมประเภทเดียวกันกับ Dia เช่น \cmd{kivio}, \cmd{xfig}\cindex{xfig}, \cmd{tgif}\cindex{tgif}, \cmd{kdraw}\cindex{kdraw} ฯลฯ.

\subsection{ImageMagick}
ImageMagick\gindex{imagemagick@ImageMagick} เป็นไลบรารีภาษาคอมพิวเตอร์ต่างๆสำหรับประมวลผลรูปภาพและมีจุดเด่นที่รับรู้ประเภทรูปได้หลายฟอร์แมต. ในแพ็กเกจ ImageMagick จะมีโปรแกรมบรรทัดคำสั่งรวมที่สำคัญๆอยู่ด้วยได้แก่
\begin{itemize}
\item \cmd{display}\cindex{display} --- สำหรับแสดงรูปฟอร์แมตต่างๆในระบบ X วินโดว์. ตัวโปรแกรมจะมีเมนูสำหรับประมวลผลรูปภาพเช่น หนุนรูป, ปรับแสงสี, แปลงฟอร์แมต เป็นต้น. วิธีใช้ที่ง่ายที่สุดคือให้ชื่อไฟล์รูปภาพที่ต้องการแสดงผลเป็นอาร์กิวเมนต์ของคำสั่ง.
\item \cmd{convert}\cindex{convert} --- แปลงฟอร์แมตรูปภาพด้วยบรรทัดคำสั่ง (ตัวอย่างที่ \ref{ex:shellconvert}). คำสั่งนี้ถ้าใช้งานอย่างจริงจังสามารถทำอะไรได้มากกว่าการแปลงฟอร์แมต, ให้อ่านรายละเอียดเพิ่มเติมจากแมนเพจ.
\item \cmd{composite}\cindex{composite} --- บรรทัดคำสั่งสำหรับสร้างประกอบรูป. เช่นการสร้างรูปใหม่โดยหาผลต่างของรูปสองรูปที่กำหนดเป็นต้น.
\item \cmd{conjure}\cindex{conjure} --- ตัวแปรภาษา MSL (Magick Scripting Language) เป็นภาษาแบบ XML เขียนสคริปต์ประมวลผลรูปภาพ.
\item \cmd{identify}\cindex{identify} --- แสดงข้อมูลต่างของรูปที่ระบุเป็นอาร์กิวเมนต์เช่นฟอร์แมตรูปภาพและขนาดเป็นต้น. ถ้าใช้ตัวเลือก \cmd{-verbose} ประกอบจะแสดงรายละเอียดเพิ่มขึ้นกว่าปรกติ.
\item \cmd{import}\cindex{import} --- จับหน้าจอแล้วบันทึกเป็นรูปภาพตามฟอร์แมตชื่อไฟล์ที่ระบุเป็นอาร์กิวเมนต์. ในกรณีที่ต้องการจับหน้าจอพื้นโต็ะให้ใช้ตัวเลือก \cmd{-window root}. โปรแกรมประเภทเดียวกันเช่น \cmd{gnome-panel-screenshot} เป็นต้น.
\end{itemize}

\subsection{โปรแกรมดูรูปภาพ}
\cmd{gthumb}\cindex{gthumb} เป็นโปรแกรมสำหรับดูรูปภาพ, ใช้ง่าย. วิธีการดูรูปมีหลายแบบเช่นดูรูปแบบเล็กๆที่อยู่ในไดเรกทอรี, ดูรูปเดี่ยวๆ, ดูรูปเต็มหน้าจอ, และดูแบบสไลด์โชว์. นอกจากการดูรูปแล้วยังสามารถปรับแสงสี, ขนาดได้และเลือกรูปสร้างอัลบัมแสดงบนเว็บ, สร้างภาพดรรชนีจากรูปที่เลือกไว้.

โปรแกรมประเภทเดียวกันกับ gThumb เช่น \cmd{eog}\cindex{eog} (Eye Of GNOME), \cmd{xv}\cindex{xv}, \cmd{nautilus} ฯลฯ.

\subsection{โปรแกรมดูเอกสาร}
เอกสารที่เผยแพร่ทางอินเทอร์เน็ตในปัจจุบันมักจะเป็นฟอร์แมตในตระกูล PostScript ซึ่งรวมถึงเอกสารแบบ PDF ด้วย. เอกสารเหล่านี้สามารถเปิดดูด้วยตัวแปลภาษา PostScript ได้แก่โปรแกรม \cmd{gs}\cindex{gs} (GhostScript)\gindex{ghostscript@GhostScript}. โปรแกรมที่ใช้เปิดอ่านเอกสารเหล่านี้เป็นซอฟต์แวร์เสรีและมักจะเป็นฟรอนต์เอ็น (frontend) ของตัวแปลภาษา GhostScript เช่น \cmd{gv}\cindex{gv}, \cmd{ggv}\cindex{ggv}, \cmd{gpdf}, \cmd{xpdf}\cindex{xpdf}, \cmd{kpdf}\cindex{kpdf} ฯลฯ. ส่วนโปรแกรมที่ไม่เปิดเผยรหัสแต่ใช้เปิดอ่านเอกสาร PDF ที่นิยมได้แก่ Adobe Acrobat Reader (\cmd{acroread})\cindex{acroread}.

\begin{figure}[!hbt]
\plfiguretwo{.4}{gpdf.eps}{acroread.eps}{โปรแกรม \cmd{gpdf} และ \cmd{acroread}.}{pdfreader}
\end{figure}

%\begin{figure}[!hbt]
%\plfigure{.45}{acroread.eps}{โปรแกรม \cmd{acroread}.}{acroread}
%\end{figure}


\section{มัลติมีเดีย}
โปรแกรมที่เกี่ยวกับมัลติมีเดียในลินุกซ์มีให้ใช้มากขึ้นเรื่อยๆและพัฒนาได้ดีขึ้น. ปัญหาหลักของโปรแกรมเหล่านี้ไม่ใช่ปัญหาทางเทคนิคแต่เป็นปัญหาเรื่องสิทธิบัตรเช่น \emph{codec (compressor-decompressor)} \myvocab{c}{codec}{การเข้าถอดรหัสข้อมูลเสียงหรือภาพในระบบดิจิตอล.} ที่ใช้เปิดไฟล์ดูหนังจดสิทธิบัตรไว้และไม่สามารถใช้ได้อย่างเสรี. ดังนั้นดิสโทรบางค่ายจะไม่เตรียมแพ็กเกจสำหรับดูหนังให้, แต่ผู้ใช้สามารถดาว์นโหลดไบนารีหรือรหัสต้นฉบับได้จากเว็บไซด์ของผู้พัฒนาซอฟต์แวร์นั้นๆโดยตรง.


\subsection{โปรแกรมฟังเพลง}
โปรแกรมเล่นเพลงในยุคแรกๆเป็นโปรแกรมบรรทัดคำสั่งคือโปรแกรม \cmd{mpg123}\cindex{mpg123} แต่ใช่ซอฟต์แวร์เสรีจึงมีการพัฒนาซอฟต์แวร์ใหม่ในชื่อ \cmd{mpg321}\cindex{mpg321} และเปิดเป็นซอฟต์แวร์เสรี. ปัจจุบันโปรแกรมเล่นไฟล์เพลงดิจิตอลเปลี่ยนเป็นโปรแกรมแบบ GUI เสียส่วนใหญ่. โปรแกรมที่ได้ความนิยมเช่น \cmd{xmms}\cindex{xmms}, \cmd{beep-media-player}\cindex{beep-media-player}, \cmd{rhythmbox} เป็นต้น. โปรแกรมเหล่านี้ใช้ฟังเพลงได้เหมือนกันแต่อาจจะแตกต่างกันตรงที่รูปร่างหน้า, ความสามารถต่างๆแล้วแต่โปรแกรม.

\begin{figure}[!hbt]
\plfigure{.45}{xmms.eps}{โปรแกรม \cmd{xmms}.}{xmms}
\end{figure}

\begin{figure}[!hbt]
\plfigure{.45}{rhythmbox.eps}{โปรแกรม \cmd{rhythmbox}.}{rhythmbox}
\end{figure}



\subsection{โปรแกรมสร้างไฟล์เพลงดิจิตอล}
ในลินุกซ์มีโรปแกรมสำหรับแปลงเพลงจาก CD ไปเป็นไฟล์ในฟอร์แมต MP3 (MPEG layer 3) หรือฟอร์แมตอื่นๆด้วยโปรแกรม \cmd{cdparanoia}\cindex{cdparanoia} หรือ \cmd{cdda2wav}\cindex{cdda2wav}. โปรแกรมนี้เป็นโปรแกรมบรรทัดคำสั่งทำหน้าที่สกัดข้อมูลเพลงจากแผ่นเพลง CD ไปเป็นไฟล์ฟอร์แมต WAV หรือฟอร์แมตพื้นฐานอื่นๆ. ไฟล์เพลงดิจิตอลที่สกัดจากโปรแกรมจะเป็นฟอร์แมต WAV ซึ่งไม่มีการบีบอัดข้อมูลทำให้ไฟล์ที่ได้มีขนาดใหญ่.  ดังนั้นจึงมีความจำเป็นต้องบีบอัดข้อมูลเพลงเหล่านี้ต่อไปเป็นไฟล์ฟอร์แมตอื่นๆเช่น MP3, OGG (Ogg Vobris)\gindex{ogg@OGG|see{Ogg Vobris}}\gindex{ogg vobris@Ogg Vobris}, FLAC (Free Loose-less Audio Codec)\gindex{flac@FLAC|see{Free Loose-less Audio Codec}}\gindex{free losse-less audio codec@Free Loose-less Audio Codec} ฯลฯ. โปรแกรมสำหรับแปลงไฟล์ WAV เป็นฟอร์แมตอื่นๆเช่น flacen, lame, mp3enc??? ฯลฯ.


ในการใช้งานจริงมักจะใช้โปรแกรมแบบ GUI เช่น \cmd{grip}\cindex{grip} จัดการตั้งแต่การสกัดข้อมูลออกจากแผ่น CD และบีบอัดให้ด้วยซึ่งจะสะดวกกว่าการใช้โปรแกรมบรรทัดคำสั่ง. \cmd{grip} เป็นโปรแกรมฟรอนต์เอ็นของโปรแกรมที่เกี่ยวข้องต่างๆเช่น \cmd{cdparanoia}, \cmd{lame} ฯลฯ และมีความสามารถดึงฐานข้อมูลของเพลงในแผ่น CD มาเขียนเป็นชื่อไฟล์เพลงดิจิตอลด้วย.


\subsection{โปรแกรมดูหนัง}
โปรแกรมดูหนัง, DVD หรือไฟล์วิดิโอเช่นไฟล์ AVI ในลินุกซ์มีอยู่หลายตัวเช่น \cmd{xine}, \cmd{vlc}, \cmd{totem}, \cmd{mplayer} ฯลฯ แล้วแต่เลือกใช้ตามชอบ. เนื่องจากโปรแกรมดูหนังเหล่านี้มักจะมีปัญหาเรื่องสิทธิบัตรทำให้ดิสโทรบางค่ายไม่เผยแพร่แพ็กเกจนั้นๆแต่ผู้ใช้สามารถดาว์นโหลดซอฟต์แวร์และติดตั้งด้วยตัวเอง.

\begin{figure}[!hbt]
\plfigure{.5}{totem.eps}{ดูหนังด้วย \cmd{totem}.}{totem}
\end{figure}


โปรแกรมอื่นๆที่เกี่ยวกับวิดิโอได้แก่โปรแกรมแปลง\emph{โคเดก (codec)}ของไฟล์วิดิโอ. โปรแกรมสำหรับแปลงโคเดกเช่น \cmd{ffmpeg}\cindex{ffmpeg}, \cmd{transcode}\cindex{transcode} ฯลฯ. สำหรับการนำข้อมูลเข้าจากกล้องดิจิตอลวิดิโอใช้โปรแกรม \cmd{dvgrab}\cindex{dvgrab}, \cmd{kino}\cindex{kino} แล้วแปลงเป็นไฟล์โคเดกอื่นๆภายหลัง.

\subsection{โปรแกรมเขียน CD, DVD}
ขั้นตอนเขียน CD หรือ DVD ในระบบปฏิบัติการลินุกซ์โดยปรกติจะสร้างไฟล์อิมเมจ ISO ก่อน. ไฟล์อิมเมจ ISO สร้างด้วยคำสั่ง \cmd{mkisofs} รวมไฟล์หรือไดเรกทอรีต่างๆเข้าด้วยกันในไฟล์เดียวและมักจะตั้งชื่อส่วนขยายชื่อไฟล์เป็น \cmd{.iso} หรือ \cmd{.raw}. หลังจากที่ได้ไฟล์อิมเมจ ISO แล้วก็จะใช้โปรแกรม \cmd{cdrecord}\cindex{cdrecord} ซึ่งเป็นโปรแกรมบรรทัดคำสั่งเขียนข้อมูลในไฟล์อิมเมจ ISO ลงในแผ่น CD. ถ้าเป็นการเขียนแผ่น DVD ก็จะใช้โปรแกรม \cmd{growisofs}\cindex{growisofs} หรือ \cmd{dvdrecord}\cindex{dvdrecord}.

การใช้งานจริงจะใช้โปรแกรมคำสั่งที่แนะนำก็ได้หรือใช้โปรแกรมแบบ GUI เพื่ออำนวยความสะดวกเช่นโปรแกรม \cmd{xcdroast}\cindex{xcdroast}, \cmd{nautilus}, \cmd{k3b}\cindex{k3b} เป็นต้น. ปัจจุบันโปรแกรมที่นิยมและเป็นที่ยอมรับว่าใช้งานได้ดีคือ \cmd{k3b}. \cmd{k3b} ไม่ใช่โปรแกรมเขียน CD หรือ DVD ธรรมดา, โปรแกรมนี้สามารถสกัดข้อมูลหนังจากแผ่น DVD แล้วแปลงเป็นไฟล์ MPEG-4 ได้ด้วย.

\begin{figure}[!hbt]
\plfiguretwo{.38}{k3b-main.eps}{k3b-burn.eps}{โปรแกรม \cmd{k3b} สำหรับเขียน CD หรือ DVD.}{k3b}
\end{figure}



\section{อินเทอร์เน็ต}

\subsection{เบราเซอร์}
\cmd{xmosaic}\cindex{xmosaic} เป็นเบราเซอร์ตัวแรกๆในยุคเริ่มต้นของอินเทอร์เน็ต. โปรแกรมนี้เป็นเบราวเซอร์ที่ทำงานบนระบบ X วินโดว์ในระบบปฏิบัติการยูนิกซ์และต่อมาผู้สร้างพัฒนาเบราเซอร์ตัวต่อมาคือ Netscape\gindex{netscape@Netscape} และเผยแพร่รหัสต้นฉบับเป็น Mozilla ในที่สุดราวปี 1996?.

Mozilla ยังคงรูปร่างและคุณสมบัติต่างๆเหมือน Netscape เช่นมีโปรแกรมประกอบอื่นๆนอกจากตัวเบราเซอร์เช่น โปรแกรมอ่านเมล, โปรแกรมช่วยเขียนโฮมเพจ ฯลฯ. ต่อมามีการแยกโปรแกรมเบราเซอร์ออกมาอย่างเดียวและเปลี่ยนชื่อมาเป็น Firefox ที่รู้จักกันอย่างกว้างขวางทุกวันนี้. Firefox เป็นเบราเซอร์ที่ออกแบบแยกส่วนประกอบการทำงานต่างๆเช่น XP (Cross Platform), XUI (Extensible User Interface), Gekko ฯลฯ. Gekko เอ็นจินเป็นส่วนสำหรับแสดงผลข้อมูล HTML ทางหน้าจอและโปรแกรมอื่นๆสามารถใช้ Gekko ในโปรแกรมของตัวเองด้วย.

\begin{figure}[!hbt]
\plfigure{.5}{mozilla-firefox.eps}{Firefox ที่รองรับการตัดคำภาษาไทย.}{mozilla-firefox}
\end{figure}


สภาพแวดล้อมเดสก์ท็อปต่างๆมีเบราเซอร์ของตัวเองเช่นใน KDE มี Konqueror, ใน GNOME มี Epiphany หรือ Galeon. เบราเซอร์เหล่านี้ใช้ทูลคิตของสภาพแวดล้อมเดสก์ท็อปที่สังกัดจึงทำงานร่วมกับโปรแกรมอื่นๆได้ดีในสภาพแวดล้อมเดสก์ท็อปนั้นๆ. Konqueror ใช้เอ็นจินการแสดงผล KHTML, Epiphany และ Galeon ใช้เอ็นจิน Gekko ของ Mozilla.

Konqueror\gindex{konqueror@Konqueror} เป็นเบราเซอร์อินเทอร์เน็ตและไฟล์เบราเซอร์ภายในตัวในสภาพแวดล้อมเดสก์ท็อป KDE. Konqueror ยังสามารถติดต่อโปรโตคอลประเภทต่างๆเช่น smb\gindex{smb} โดยเขียนที่อยู่เป็น \cmd{smb:///\textit{hostname}} ได้ด้วย.

สำหรับคนที่ไม่ต้องการใช้ GUI ในการแสดงผลอาจจะใช้เบราเซอร์ \cmd{lynx}\cindex{lynx} หรือ \cmd{w3m}\cindex{w3m} แทน. โปรแกรมเหล่านี้จะรันในเทอร์มินอล.

\subsection{Instant Messenger Service}
ลินุกซ์สามารถใช้บริการ Instant Messenger Service\gindex{instant messenger service@Instant Messenger Service} ของ MSN Messenger, AOL หรือ Yahoo Messenger ได้โดยใช้โปรแกรมเช่น \cmd{kopete}\cindex{kopete}, \cmd{gaim}\cindex{gaim} ฯลฯ. โปรแกรม Messaging Service ในลินุกซ์เช่น \cmd{kopete} มีคุณสมบัติรองรับบริการหลายตัวคือติดต่อกับ MSN, AOL, Yahoo ได้ด้วยโปรแกรมเดียว. โปรแกรมเหล่านี้ยังมีข้อจำกัดบางอย่างเช่นยังไม่สามารถสื่อสารด้วยเสียงหรือภาพจากกล้องวิดิโอแต่ใช้สื่อสารด้วยการพิมพ์แป้นพิมพ์หรือส่งไฟล์ให้ซึ่งกันและกันได้. บางครั้งโปรโตคอลที่ใช้ในการสื่อสารเช่น MSN Messenger มีการเปลี่ยนแปลง, โปรแกรมเหล่านี้ไม่สามารถใช้ได้จนกว่าจะอัปเดทตัวโปรแกรมเป็นรุ่นล่าสุด.

%\begin{figure}[!hbt]
%\plfigure{.4}{kopete-services.eps}{\cmd{kopete}, โปรแกรม Instant Messenger Service ที่รองรับหลายเครือข่ายในตัวโปรแกรมเดียว.}{kopete}
%\end{figure}
\begin{figure}[!hbt]
\plfiguretwo{.5}{kopete-main.eps}{kopete-message.eps}{\cmd{kopete}, โปรแกรม Instant Messenger Service ที่รองรับหลายเครือข่ายในตัวโปรแกรมเดียว.}{kopete}
\end{figure}


Jabber\gindex{jabber@Jabber} เป็นระบบ Instant Messenger Service แบบโอเพนซอร์ส, ผู้ใช้สามารถสร้างเซิร์ฟเวอร์ด้วยตัวเองโดยไม่ต้องใช้เน็ตเวิร์กปิดของ Instant Messenger Service อื่นๆ.



\subsection{โปรแกรมช่วยดาว์นโหลด}
การดาว์นโหลดไฟล์ทางอินเทอร์เน็ตคราวละไม่มากอาจจะใช้เบราเซอร์ดาว์นโหลด. แต่สำหรับการดาว์นโหลดโดยอัตโนมัติ, เขียนเป็นสคริปต์ หรือดาว์นโหลดหลายคอนเนกชันต้องใช้โปรแกรมพิเศษต่างหาก.

\cmd{wget}\cindex{wget} เป็นโปรแกรมบรรทัดคำสั่งสำหรับดาว์นโหลดไฟล์ด้วยโปรโตคอล HTTP หรือ FTP. การดาว์นโหลดด้วยคำสั่ง \cmd{wget} มีข้อดีที่ใช้ดาว์นโหลดไฟล์แบบรีเคอร์ซีฟ (recursive) ทั้งไดเรกทอรีได้, ดาว์นโหลดแบบมิรเรอร์ (mirror), เลือกดาว์ฯโหลดเฉพาะไฟล์ที่มีตัวขยายชื่อไฟล์ตามต้องการเช่น ดาว์นโหลดไฟล์ .pdf อย่างเดียว ฯลฯ. การใช้งานโดยละเอียดสามารถอ่านได้จาก \cmd{man wget}.

\begin{MyExample}[วิธีใช้ \cmd{wget}]
\begin{MyEx}
$ \cin{SITE=http://linux.thai.net/~poonlap/images}
$ \cin{wget -nd $SITE/gdm.png} \mycomment{ดาว์นโหลดไฟล์ \cmd{gdm.png} ไว้ที่ไดเรกทอรีปัจจุบัน}
$ \cin{wget -r $SITE} \mycomment{ดาว์นโหลดไฟล์ทุกไฟล์ทั้งไดเรกทอรี}
$ \cin{wget -nd -r -A .gif $SITE} \mycomment{ดาว์นโหลดเฉพาะไฟล์ \cmd{.gif}}
\end{MyEx}
\end{MyExample}%$

Prozilla เป็นโปรแกรมดาว์นโหลดที่สามารถสร้างคอนเนกชันเวลาดาว์นโหลดได้หลายตัวพร้อมๆกัน. โปรแกรมประเภทนี้เรียกว่า download accelerator ช่วยให้ดาว์นโหลดไฟล์ที่ต้องการได้เร็วขึ้นโดยการเพิ่มคอนเนกชัน. \cmd{proz} เป็นโปรแกรม Prozilla ที่ทำงานในเทอร์มินอลและมีฟรอนต์เอ็นแบบ GUI ด้วยแต่อาจจะต้องติดตั้งต่างหาก.

\subsection{Video Conference}
สำหรับระบบที่มีกล้องเช่น USB และมีระบบเสียงและไมโครโฟนพร้อมสามารถใช้โปรแกรมประชุมข้ามเครือยข่ายได้ด้วย \cmd{gnome-meeting}\cmd{gnome-meeting}. Gnome meeting เป็นโปรแกรมสร้างตามมาตรฐาน H.326 ดังนั้นจึงสามารถใช้ได้กับอุปกรณ์ video conference ที่ใช้มาตรฐานเดียวกันหรือโปรแกรม NetMeeting ในระบบปฏิบัติการวินโดวส์ได้.

\section{โปรแกรมรับส่งอีเมล}
โปรแกรมรับส่งอีเมลในยุคแรกๆเรียบง่ายและเป็นบรรทัดคำสั่งเช่นโปรแกรม \cmd{mail}\cindex{mail} หรือ \cmd{mailx}\cindex{mailx}. ปัจจุบันคำสั่ง \cmd{mail} ไม่นิยมใช้แล้วยกเว้นจะสั่งส่งเมลด้วยบรรทัดคำสั่ง.

โปรแกรมรับส่งเมลที่ได้รับความนิยมในช่วงต่อมาคือ \cmd{pine}, Rmail, MH ฯลฯ. โปรแกรมเหล่านี้เช่น \cmd{pine} ทำงานในเทอร์มินอลเป็นเมนูอ่านหรือเขียนเมล, Rmail, MH เป็นแพ็กเกจรับส่งเมลที่ใช้ใน Emacs เป็นต้น. สำหรับคนที่นิยมใช้เทอร์มินอลมักจะใช้ \cmd{mutt}\cindex{mutt} ซึ่งเป็นโปรแกรมรับส่งเมลใช้ในเทอร์มินอลคล้าย \cmd{pine} แต่มีความสามารถต่างๆเหนือกว่า.

ปัจจุบันโปรแกรมรับส่งเมลแบบ GUI มีให้เลือกมากมายเช่น Thunderbire, Evolution, Kmail ฯลฯ ตามความชอบพอของผู้ใช้แต่ละคน.



\section{โปรแกรมมิ่ง}
การพัฒนาซอฟต์แวร์แบบดั้งเดิมในระบบระบบปฏิบัติการลินุกซ์นิยมใช้บรรณาธิกรณ์เช่น Vi, Emacs เขียนรหัสต้นฉบับ, สร้างไฟล์ Makefile เป็นสคริปต์สร้างโปรแกรมด้วยคอมไพเลอร์โดยอัตโนมัติ. IDE (Integrated Deveopment Environment) เป็นแอพพลิเคชันที่รวมการขั้นตอนการพัฒนาซอฟต์แวร์ต่างๆตั้งแต่การควบคุมโปรเจค, บรรณาธิกรณ์สำหรับเขียนรหัสต้นฉบับ, การออกแบบอินเทอร์เฟสของโปรแกรม, การคอมไพล์, ดีบักเข้าด้วยกัน. โปรแกรม IDE ในลินุกซ์เริ่มมีบทบาทมากขึ้นเรื่อยและโปรแกรมที่นิยมใช้กันได้แก่ Kdevelop\gindex{kdevelop@Kdevelop}, Anjuta\gindex{anjuta@Anjuta}, Monodevelop\gindex{monodevelop@Monodevelop} ฯลฯ.

\section{วิทยาศาสตร์}
ในลินุกซ์มีโปรแกรมสำหรับใช้งานคำนวณ, สร้างกราฟ, สถิติ เหมาะสำหรับนักศึกษาและนักเรียนทั่วไป. โปรแกรมง่ายๆทีตั้งแต่เครื่องคิดเลขวิทยาศาสตร์จนถึงโปรแกรมคำนวณข้อมูลสถิติเช่น \cmd{R}\index{command}{r@\cmd{R}}.

สำหรับการเขียนกราฟคณิตศาสตร์ทั่วไปอาจจะใช้ \cmd{gnuplot}\cindex{gnuplot} เขียนกราฟจากสมการ, หรือข้อมูลดิบ. ส่วนการคำนวณด้วยวิทยาศาสตร์, เมตริก, สถิติ จะใช้โปรแกรม \cmd{R} หรือ \cmd{octave}\cindex{octave} เป็นต้น.

\section{รีโมตเดสก์ท็อป}
การติดต่อใช้ระบบปฏิบัติการอื่นๆเช่นระบบปฏิบัติการวินโดวส์สามารถใช้ \cmd{rdesktop}\cindex{rdesktop} ติดต่อขอหน้าจอล็อกอินของเครื่องวินโดวส์ที่อยู่ในเครือข่าย. \cmd{rdesktop} เป็นทางเลือกแทน \emph{VNC (Virtual Network Computing)} กรณีที่ต้องการล็อกอินเครื่องวินโดวส์ที่มี Terminal Service ทำงานอยู่. การใช้ \cmd{rdesktop} สะดวกในกรณีที่ใช้ลินุกซ์ประจำแล้วต้องการใช้วินโดวส์ของเครื่องคอมพิวเตอร์อีกเครื่องหนึ่งผ่านทางเครือข่าย. ผู้ใช้สามารถเลือกขนาดหน้าจอเป็นหน้าต่างแอพพลิเคชันต่างหากหรือทำงานเต็มหน้าต่างแล้วเปลี่ยนหน้าจอไปมา.

สำหรับการรีโมตเดสก์ท็อปหน้าจอลินุกซ์หรือระบบปฏิบัติการอื่นๆจะใช้ VNC. ในระบบ VNC จะแบ่งออกเป็นตัวแชร์หน้าจอและตัวดูหน้าจอ. โปรแกรมสำหรับแชร์หน้าจอ \cmd{vino-server}, x0vncserver ฯลฯ.   โปรแกรมดูหน้าจอด้วย VNC เช่น \cmd{vncviewer}, \cmd{krdc} ฯลฯ.

\section{พจนานุกรม}
โปรแกรมพจนานุกรมในลินุกซ์มีหลายชนิดแบบที่เป็นแอพเพล็ตฝังอยู่ในพาเนลและเป็นโปรแกรมหน้าต่างเช่น \cmd{gdict}\cindex{gdict}, \cmd{kdict}. โปรแกรมเหล่านี้มักเป็นโปรแกรมพจนานุกรมอธิบายภาษาอังกฤษด้วยภาษาอังกฤษ.

โปรแกรมพจนานุกรมแปลศัพท์อังกฤษไทยมีหลายตัวและพัฒนาโดยอาสาสมัคร.
\begin{itemize}
\item Lexitron --- เป็นโปรแกรมพจนานุกรมที่สร้างด้วย Java โดย NECTEC.
\item \cmd{kdicthai}\cindex{kdicthai} --- โปรแกรมนี้สร้างดัดแปลงต่อจากโปรแกรม \cmd{kdict} พัฒนาโดยคุณ Donga. ข้อมูลของตัวโปรแกรมมาจากพจนานุกรม DictHope โดย ??? ซึ่งเป็นโปรแกรมบนวินโดวส์.

\begin{figure}[!hbt]
\plfigure{.7}{kdictthai.eps}{โปรแกรมพจนานุกรมแปลอังกฤษไทย \cmd{kdictthai}.}{kdictthai}
\end{figure}

\item \cmd{cetdict}\cindex{cetdict} --- โปรแกรมแปลศัพท์อังกฤษไทยด้วยบรรทัดคำสั่งหรือโต้ตอบในเทอร์มินอล. มีความสามารถเติมเต็มคำหรือแสดงรายการคำที่เป็นไปได้. ข้อมูลคำแปลมาจาก DictHope เช่นเดียวกับ \cmd{kdictthai}
\item ข้อมูลศัพท์อังกฤษไทยสำหรับ dictd เซิร์ฟเวอร์ --- ไม่ใช้โปรแกรมแต่เป็นข้อมูลคำศัพท์ใช้กับเซิร์ฟเวอร์ \cmd{dictd}\cindex{dictd} ซึ่งเป็นเซิร์ฟเวอร์พจนานุกรมให้ไคลเอ็นต์เช่น \cmd{gdict}, \cmd{kdict} ติดต่อแปลคำผ่านทางเครือข่าย. ผู้ใช้สามารถเลือกใช้โปรแกรมอะไรก็ได้ที่รองรับโปรโตคอล dictd และปรับแต่งโปรแกรมให้ใช้ศัพท์จากเซิร์ฟเวอร์ที่เตรียมไว้.
\end{itemize}


\section{สรุปท้ายบท}
\begin{itemize}
\item ในบทนี้เป็นการแนะนำโปรแกรมใช้งานลินุกซ์อย่างคร่าวๆโดยเน้นอธิบายการใช้งานบรรณาธิกรณ์ Vi และ Emacs.
\item ผู้ใช้ควรจะเรียนรู้การใช้งานบรรณาธิกรณ์อะไรก็ได้ตัวหนึ่งที่มีใช้ในลินุกซ์ทุกดิสโทรโดยปริยายเช่น Vi.
\item โปรแกรมต่างๆอาจจะเป็นโปรแกรมบรรทัดคำสั่งและมีโปรแกรมแบบ GUI เป็นฟรอนต์เอ็น. สำหรับการใช้งานทั่วไปควรใช้โปรแกรมฟรอนต์เอ็นต์จะสะดวกกว่า.
\item โปรแกรมใช้งานในลินุกซ์ยังมีอีกมากมาย, ผู้ใช้อาจจะหาโปรแกรมหรือแพ็กเกจที่ต้องการใช้เพิ่มเติมได้จากอินเทอร์เน็ต.
\item โปรแกรมติดตั้งแพ็กเกจบางระบบมีคำสั่งสำหรับหาโปรแกรมหรือแยกประเภทแพ็กเกจตามการใช้งานให้แล้ว. ผู้ใช้อาจจะใช้ระบบติดตั้งแพ็กเกจช่วยหาโปรแกรมที่ต้องการ.
\end{itemize}


